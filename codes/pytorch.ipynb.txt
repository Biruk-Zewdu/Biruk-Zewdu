{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.1"},"colab":{"provenance":[],"collapsed_sections":["8vUJG0Ofsp9L","S5eWKE4Nsp9R"],"toc_visible":true,"gpuType":"T4"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"QbjN-8O3sp9I"},"source":["# [Week 4] PyTorch\n","\n","In this lab session, we are going to cover the basics of PyTorch Framework, next let's implement a linear model and train it with PyTorch"]},{"cell_type":"markdown","metadata":{"id":"0_6tgh_lsp9I"},"source":["## Why PyTorch?"]},{"cell_type":"markdown","metadata":{"id":"EMwIjuVvsp9J"},"source":["- A popular deep learning framework\n","- Ease of use, flexibility, efficient memory usage, intuitive and concise code\n","- Python-like coding, high compatibility with Numpy"]},{"cell_type":"markdown","metadata":{"id":"6O3b-lLfsp9J"},"source":["![picture](https://www.assemblyai.com/blog/content/images/2023/01/percentage_repo_2023.png)"]},{"cell_type":"markdown","metadata":{"id":"8vUJG0Ofsp9L"},"source":["## PyTorch and Numpy"]},{"cell_type":"markdown","metadata":{"id":"qG5rTO8tsp9L"},"source":["PyTorch provides a data structure called **tensor**, which is almost the same with NumPy\\\n","(Also it supports GPU acceleration, look into this later)"]},{"cell_type":"code","source":["import torch\n","import numpy as np\n","\n","torch.__version__"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"H3EmwFj0lAMJ","outputId":"3d3cffc8-0a15-4c3c-894c-314d3eebb71e","executionInfo":{"status":"ok","timestamp":1694496927827,"user_tz":-540,"elapsed":3,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'2.0.1+cu118'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"N5RrHkDdsp9O"},"source":["### PyTorch tensor and NumPy array"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dT6LsNonsp9O","outputId":"59dc8f11-5cb1-4ab7-aa91-9d86689fbcb9","executionInfo":{"status":"ok","timestamp":1694493171972,"user_tz":-540,"elapsed":6,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["np_array = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n","print(np_array)\n","\n","torch_tensor = torch.tensor([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n","print(torch_tensor)"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[1 2]\n","  [3 4]]\n","\n"," [[5 6]\n","  [7 8]]]\n","tensor([[[1, 2],\n","         [3, 4]],\n","\n","        [[5, 6],\n","         [7, 8]]])\n"]}]},{"cell_type":"code","source":["numpy_to_torch = torch.tensor(np_array)\n","print(numpy_to_torch)\n","\n","torch_to_numpy = numpy_to_torch.numpy()\n","print(torch_to_numpy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oOW52cFExvMK","outputId":"8491c940-abbc-4ee5-ed0f-22c34827c457","executionInfo":{"status":"ok","timestamp":1694493171972,"user_tz":-540,"elapsed":5,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[[1, 2],\n","         [3, 4]],\n","\n","        [[5, 6],\n","         [7, 8]]])\n","[[[1 2]\n","  [3 4]]\n","\n"," [[5 6]\n","  [7 8]]]\n"]}]},{"cell_type":"markdown","source":["### Same operations with same grammer"],"metadata":{"id":"WmmoqHRCl69a"}},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tVKGdRwNsp9P","outputId":"d01cfb76-8955-4e9c-a621-da5a515ac62a","executionInfo":{"status":"ok","timestamp":1694493171972,"user_tz":-540,"elapsed":4,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["# numpy\n","print(np_array.shape)\n","\n","# torch\n","print(torch_tensor.shape)\n","print(torch_tensor.size())"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["(2, 2, 2)\n","torch.Size([2, 2, 2])\n","torch.Size([2, 2, 2])\n"]}]},{"cell_type":"code","source":["# numpy\n","np_array_ones = np.ones_like(np_array)\n","print(np_array_ones)\n","print(np_array_ones.shape)\n","\n","# torch\n","torch_tensor_ones = torch.ones_like(torch_tensor)\n","print(torch_tensor_ones)\n","print(torch_tensor_ones.size())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eoTAqt-1mEod","outputId":"10d46dfc-36ad-4ed6-de2c-5b476dd97199","executionInfo":{"status":"ok","timestamp":1694493171972,"user_tz":-540,"elapsed":4,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[1 1]\n","  [1 1]]\n","\n"," [[1 1]\n","  [1 1]]]\n","(2, 2, 2)\n","tensor([[[1, 1],\n","         [1, 1]],\n","\n","        [[1, 1],\n","         [1, 1]]])\n","torch.Size([2, 2, 2])\n"]}]},{"cell_type":"code","source":["# numpy\n","np_array_1, np_array_2 = np.array([1, 2]), np.array([3, 4])\n","print(np_array_1 + np_array_2)\n","\n","# torch\n","torch_tensor_1, torch_tensor_2 = torch.tensor([1, 2]), torch.tensor([3, 4])\n","print(torch_tensor_1 + torch_tensor_2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QKuA6Ds1rvei","outputId":"c5043d61-8f87-4ad0-8305-9de66ff6d147","executionInfo":{"status":"ok","timestamp":1694493171973,"user_tz":-540,"elapsed":5,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["[4 6]\n","tensor([4, 6])\n"]}]},{"cell_type":"code","source":["# numpy\n","print(np_array_1@np_array_2 , np.matmul(np_array_1, np_array_2))\n","\n","# torch\n","print(torch_tensor_1@torch_tensor_2, torch.matmul(torch_tensor_1, torch_tensor_2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iXwSZSJ7owct","outputId":"e7ebdc52-8af6-40b9-e8b8-5a3afaea0d8b","executionInfo":{"status":"ok","timestamp":1694493171973,"user_tz":-540,"elapsed":4,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["11 11\n","tensor(11) tensor(11)\n"]}]},{"cell_type":"markdown","metadata":{"id":"9Ph6yZ4Nsp9P"},"source":["### Same operations with different grammer"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t6AZYswBsp9P","outputId":"248359ce-5b3e-432c-eee6-b2d5a4f40f24","executionInfo":{"status":"ok","timestamp":1694493171973,"user_tz":-540,"elapsed":4,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["# numpy\n","np_concat = np.concatenate([np_array, np_array_ones], axis=0)\n","print(np_concat)\n","print(np_concat.shape)\n","\n","# torch\n","torch_concat= torch.cat([torch_tensor, torch_tensor_ones], dim=0)\n","print(torch_concat)\n","print(torch_concat.size())"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[1 2]\n","  [3 4]]\n","\n"," [[5 6]\n","  [7 8]]\n","\n"," [[1 1]\n","  [1 1]]\n","\n"," [[1 1]\n","  [1 1]]]\n","(4, 2, 2)\n","tensor([[[1, 2],\n","         [3, 4]],\n","\n","        [[5, 6],\n","         [7, 8]],\n","\n","        [[1, 1],\n","         [1, 1]],\n","\n","        [[1, 1],\n","         [1, 1]]])\n","torch.Size([4, 2, 2])\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZBMJhl6tsp9Q","outputId":"08170e75-e5a8-4db6-d55c-c99827ecb7eb","executionInfo":{"status":"ok","timestamp":1694493171973,"user_tz":-540,"elapsed":4,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["# numpy\n","np_reshaped = np_concat.reshape(4, -1)\n","print (np_reshaped)\n","print (np_reshaped.shape)\n","\n","# torch\n","torch_reshaped = torch_concat.view(4, -1)\n","print (torch_reshaped)\n","print (torch_reshaped.shape)"],"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 2 3 4]\n"," [5 6 7 8]\n"," [1 1 1 1]\n"," [1 1 1 1]]\n","(4, 4)\n","tensor([[1, 2, 3, 4],\n","        [5, 6, 7, 8],\n","        [1, 1, 1, 1],\n","        [1, 1, 1, 1]])\n","torch.Size([4, 4])\n"]}]},{"cell_type":"code","source":["# numpy\n","np_clone = np_reshaped.copy()\n","print(np_clone)\n","\n","# torch\n","torch_clone = torch_reshaped.clone()\n","print(torch_clone)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JvbKUw06ngaR","outputId":"f1eba3a9-668d-40b1-ec25-0ac743e7177d","executionInfo":{"status":"ok","timestamp":1694493171973,"user_tz":-540,"elapsed":3,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 2 3 4]\n"," [5 6 7 8]\n"," [1 1 1 1]\n"," [1 1 1 1]]\n","tensor([[1, 2, 3, 4],\n","        [5, 6, 7, 8],\n","        [1, 1, 1, 1],\n","        [1, 1, 1, 1]])\n"]}]},{"cell_type":"markdown","source":["### PyTorch for NumPy users\n","For more examples, see [here](https://github.com/wkentaro/pytorch-for-numpy-users)."],"metadata":{"id":"1LX417TeIsc_"}},{"cell_type":"markdown","metadata":{"id":"S5eWKE4Nsp9R"},"source":["## Tensor operations under GPU utilization"]},{"cell_type":"markdown","metadata":{"id":"pXgOePsysp9R"},"source":["Deep learning framework driving the successful machine learning utilizes high-performance GPU to accelarate its computation.\n","\n","Let's learn how to utilize GPU in PyTorch\n","\n","Check the hardware accelerator for your Colab!\\\n","**Runtime -> Change runtime type -> T4 GPU (Hardware accelerator)**"]},{"cell_type":"code","source":["# current GPU usages in your Colab\n","!nvidia-smi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OUOrp51tus4w","outputId":"91f425eb-cdb9-4a29-9024-4abfa48e9083","executionInfo":{"status":"ok","timestamp":1694493174799,"user_tz":-540,"elapsed":527,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Tue Sep 12 04:32:53 2023       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 525.105.17   Driver Version: 525.105.17   CUDA Version: 12.0     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   41C    P8     9W /  70W |      0MiB / 15360MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WEnKzXeIsp9S","outputId":"560341d5-7b65-42fe-ddc2-ef172d0dffb5","executionInfo":{"status":"ok","timestamp":1694493174800,"user_tz":-540,"elapsed":5,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["# could you access GPU?\n","print(torch.cuda.is_available())"],"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}]},{"cell_type":"code","source":["device = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\n","device"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TvAxLeQTzNVR","outputId":"87a3e7b2-c8f3-4a3a-84e5-883d7b5a214f","executionInfo":{"status":"ok","timestamp":1694493174800,"user_tz":-540,"elapsed":4,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["device(type='cuda')"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"v4QF2qY3sp9S","colab":{"base_uri":"https://localhost:8080/"},"outputId":"0c028c10-a001-4662-b03f-6467c25ac9f8","executionInfo":{"status":"ok","timestamp":1694493174800,"user_tz":-540,"elapsed":4,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["# on CPU\n","a = torch.ones(3)\n","b = torch.rand(3)\n","\n","print(a, a.device)\n","print(b, b.device)"],"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([1., 1., 1.]) cpu\n","tensor([0.4714, 0.5884, 0.7424]) cpu\n"]}]},{"cell_type":"code","metadata":{"id":"Sa9qkmausp9S","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ec9c1e6c-a91b-414a-d74e-89d35ea16078","executionInfo":{"status":"ok","timestamp":1694493174800,"user_tz":-540,"elapsed":4,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["c = a + b\n","\n","print(c, c.device)"],"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([1.4714, 1.5884, 1.7424]) cpu\n"]}]},{"cell_type":"code","metadata":{"id":"YBmLLHZ5sp9U","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e22c2442-b4db-4334-9b54-ef3c740a3915","executionInfo":{"status":"ok","timestamp":1694493179819,"user_tz":-540,"elapsed":5022,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["# to GPU\n","a = a.to('cuda')\n","b = b.to('cuda')\n","\n","print(a, a.device)\n","print(b, b.device)"],"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([1., 1., 1.], device='cuda:0') cuda:0\n","tensor([0.4714, 0.5884, 0.7424], device='cuda:0') cuda:0\n"]}]},{"cell_type":"code","metadata":{"id":"VhoePABXsp9U","colab":{"base_uri":"https://localhost:8080/"},"outputId":"3d4718d5-c409-4956-e727-0a628bea7636","executionInfo":{"status":"ok","timestamp":1694493179819,"user_tz":-540,"elapsed":8,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["c = a + b\n","\n","print(c, c.device)"],"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([1.4714, 1.5884, 1.7424], device='cuda:0') cuda:0\n"]}]},{"cell_type":"code","metadata":{"id":"7cu4nPxrsp9V","colab":{"base_uri":"https://localhost:8080/"},"outputId":"650d495f-263b-45b3-903c-55dec5b6544d","executionInfo":{"status":"ok","timestamp":1694493179819,"user_tz":-540,"elapsed":5,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["# back to CPU\n","c = c.to('cpu')\n","\n","print(c, c.device)"],"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([1.4714, 1.5884, 1.7424]) cpu\n"]}]},{"cell_type":"markdown","metadata":{"id":"Xd96DeWesp9V"},"source":["## Autograd (Automatic Differentiation)\n","\n","Most machine learning (or deep learning) frameworks train your model by optimizing it through gradient descent (a first-order iterative optimization algorithm).\\\n","For this, PyTorch provides ```torch.autograd``` to automatic differentiate for all operations on PyTorch tensors.\n","\n","Let's see this with some examples."]},{"cell_type":"markdown","metadata":{"id":"aQFoPjiqsp9W"},"source":["### Get gradient"]},{"cell_type":"markdown","source":["If the `.requires_grad` of `torch.tensor` is `True`, all operations on it are ready to be tracked."],"metadata":{"id":"VEZmzYPj1zT_"}},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oXurRLYvsp9W","outputId":"b4d17c02-6cbe-408a-a614-0ece4e7e8e40","executionInfo":{"status":"ok","timestamp":1694493185559,"user_tz":-540,"elapsed":2,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["x = torch.tensor([[1., 2., 3.], [4., 5., 6.]], requires_grad=True)\n","y = torch.ones_like(x, requires_grad=True)\n","\n","print(x)\n","print(y)"],"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1., 2., 3.],\n","        [4., 5., 6.]], requires_grad=True)\n","tensor([[1., 1., 1.],\n","        [1., 1., 1.]], requires_grad=True)\n"]}]},{"cell_type":"markdown","source":["`grad_fn` references the operation creating the tensor."],"metadata":{"id":"ZbG5zT2g3uCk"}},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UPVaCg9Csp9W","outputId":"fc2bf90d-a404-408a-c86c-47d3b3f72398","executionInfo":{"status":"ok","timestamp":1694493186094,"user_tz":-540,"elapsed":12,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["z = x + y\n","print(z)\n","print(z.grad_fn)"],"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[2., 3., 4.],\n","        [5., 6., 7.]], grad_fn=<AddBackward0>)\n","<AddBackward0 object at 0x7f8372c53340>\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hG5bWmCXsp9W","outputId":"c4cbc897-eedb-498f-f6b7-23be03216f74","executionInfo":{"status":"ok","timestamp":1694493186094,"user_tz":-540,"elapsed":12,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["z = z ** 2\n","print(z)"],"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[ 4.,  9., 16.],\n","        [25., 36., 49.]], grad_fn=<PowBackward0>)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8KeFRqU-sp9X","outputId":"7b221a18-b6d2-45ad-fd5c-685dfa0688b8","executionInfo":{"status":"ok","timestamp":1694493186094,"user_tz":-540,"elapsed":10,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["o = z.mean()\n","print(o)"],"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor(23.1667, grad_fn=<MeanBackward0>)\n"]}]},{"cell_type":"code","source":["x.retain_grad()\n","y.retain_grad()\n","z.retain_grad()\n","\n","o.backward()"],"metadata":{"id":"shGdXuGM4fO0","executionInfo":{"status":"ok","timestamp":1694493186094,"user_tz":-540,"elapsed":8,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":["Slightly abuse notation by denoting the matrices, vectors as equal.\n","\n","$\\nabla_{z}o = \\frac{\\partial o}{\\partial z} = \\frac{\\partial}{\\partial z}\\frac{1}{6}\\sum_{i,j} z_{ij}=\\frac{1}{6}$\\\n","$\\nabla_{x}o = \\frac{\\partial o}{\\partial x} = \\frac{\\partial o}{\\partial z}\\cdot\\frac{\\partial z}{\\partial x} = \\frac{1}{6}\\cdot\\frac{\\partial}{\\partial x}(x+y)^2 = \\frac{1}{3}(x+y) = \\frac{x_{ij}+y_{ij}}{3}$\\\n","$\\nabla_{y}o = \\frac{\\partial o}{\\partial y} = \\frac{\\partial o}{\\partial z}\\cdot\\frac{\\partial z}{\\partial y} = \\frac{1}{6}\\cdot\\frac{\\partial}{\\partial y}(x+y)^2 = \\frac{x_{ij}+y_{ij}}{3}$"],"metadata":{"id":"zF9BBNZR6CME"}},{"cell_type":"code","source":["print(\"gradient w.r.t. z = \", z.grad)\n","print(\"gradient w.r.t. x = \", x.grad)\n","print(\"gradient w.r.t. y = \", y.grad)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z1eQP8aq4fD5","outputId":"dfd710bc-c2c3-47a7-a34c-24ea26b634b8","executionInfo":{"status":"ok","timestamp":1694493186095,"user_tz":-540,"elapsed":9,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["gradient w.r.t. z =  tensor([[0.1667, 0.1667, 0.1667],\n","        [0.1667, 0.1667, 0.1667]])\n","gradient w.r.t. x =  tensor([[0.6667, 1.0000, 1.3333],\n","        [1.6667, 2.0000, 2.3333]])\n","gradient w.r.t. y =  tensor([[0.6667, 1.0000, 1.3333],\n","        [1.6667, 2.0000, 2.3333]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"ZTnY5Phpsp9Y"},"source":["### With ```torch.no_grad()```\n","\n"]},{"cell_type":"markdown","metadata":{"id":"4Kj0c60Hsp9Y"},"source":["When you evaluate your model, no need to compute gradient. To prevent tracking and back propagation, you can also wrap the code block in with `torch.no_grad()`"]},{"cell_type":"code","metadata":{"id":"NqOULboAsp9Y","executionInfo":{"status":"ok","timestamp":1694493186095,"user_tz":-540,"elapsed":7,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["with torch.no_grad():\n","    x = torch.tensor([[1., 2., 3.], [4., 5., 6.]], requires_grad=True)\n","    y = torch.ones_like(x, requires_grad=True)\n","    y = x + y\n","    z = y ** 2\n","    out = z.mean()"],"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xxw9FVOBsp9Z","outputId":"26790a0d-7446-410a-c451-2c4ac89d3efb","executionInfo":{"status":"ok","timestamp":1694493186095,"user_tz":-540,"elapsed":7,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["out"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(23.1667)"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["out.requires_grad"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BGnmUpe69ev2","outputId":"bc11aeac-7c24-4586-9049-a6ebfad04bc3","executionInfo":{"status":"ok","timestamp":1694493186095,"user_tz":-540,"elapsed":5,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"id":"aTeg9iG_sp9Z","outputId":"d3a5f3d7-88e0-4f59-99e5-63bd79f980c8","executionInfo":{"status":"error","timestamp":1694493186783,"user_tz":-540,"elapsed":692,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["out.backward()"],"execution_count":38,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-617965056ac0>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/_tensor.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    485\u001b[0m                 \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    486\u001b[0m             )\n\u001b[0;32m--> 487\u001b[0;31m         torch.autograd.backward(\n\u001b[0m\u001b[1;32m    488\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgradient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    489\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/autograd/__init__.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    198\u001b[0m     \u001b[0;31m# some Python versions print out the first line of a multi-line function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m     \u001b[0;31m# calls in the traceback and some print out the last line\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 200\u001b[0;31m     Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n\u001b[0m\u001b[1;32m    201\u001b[0m         \u001b[0mtensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrad_tensors_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    202\u001b[0m         allow_unreachable=True, accumulate_grad=True)  # Calls into the C++ engine to run the backward pass\n","\u001b[0;31mRuntimeError\u001b[0m: element 0 of tensors does not require grad and does not have a grad_fn"]}]},{"cell_type":"markdown","metadata":{"id":"nje-BGjesp9Z"},"source":["## `nn.module` Neural Network Modules\n","\n","`torch.nn.module` is the base class for all neural network modules in PyTorch.\\\n","Simply saying, `nn.module` class represents a parametric function.\\\n","Do you remember the `class inheritance` that we learned in the previous lab session (Python Basics)? A child class created from a parent class can get the parent's attribute and call its method.\\\n","Due to `nn.module`, you can use many useful methods without defining."]},{"cell_type":"markdown","metadata":{"id":"gXR5jfpqsp9Z"},"source":["### Using pre-defined modules"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ypn-7P5usp9a","outputId":"ad869ca2-9005-47d8-af36-046ca88d935c","executionInfo":{"status":"ok","timestamp":1694496939249,"user_tz":-540,"elapsed":518,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["import torch.nn as nn\n","\n","X = torch.tensor([[1., 2., 3.], [4., 5., 6.]], requires_grad=True)\n","print (X.shape)"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([2, 3])\n"]}]},{"cell_type":"code","metadata":{"id":"_ad-ZLk5sp9a","colab":{"base_uri":"https://localhost:8080/"},"outputId":"2ddf38d8-d903-4de5-bb39-eb1835105461","executionInfo":{"status":"ok","timestamp":1694496942032,"user_tz":-540,"elapsed":317,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["# Y = XW^T + b; input dim 3, output dim 1\n","linear_fn = nn.Linear(3, 1)\n","linear_fn"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Linear(in_features=3, out_features=1, bias=True)"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["You can use `nn.module` object as it is a function."],"metadata":{"id":"ruxKL-as1m0-"}},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"smbL2japsp9a","outputId":"cce8a9a7-7b45-46f7-8614-204cd87134f4","executionInfo":{"status":"ok","timestamp":1694493418134,"user_tz":-540,"elapsed":10,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["Y = linear_fn(X)\n","print(Y)\n","print(Y.shape) # batch_size * output_dim\n","\n","Y = Y.mean()"],"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-0.5756],\n","        [-0.4336]], grad_fn=<AddmmBackward0>)\n","torch.Size([2, 1])\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kSlHALX1sp9b","outputId":"80c524b9-d0b9-452e-9442-913ae56ae3d1","executionInfo":{"status":"ok","timestamp":1694493418134,"user_tz":-540,"elapsed":8,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["Y.backward()\n","print(X.grad)"],"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-0.0189,  0.1611, -0.1186],\n","        [-0.0189,  0.1611, -0.1186]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"jvztL-YIsp9b"},"source":["You can use other types of `nn.Module` in PyTorch\n","- nn.linear\n","- nn.Conv2d\n","- nn.RNN\n","- nn.LSTM\n","- nn.GRU\n","- nn.Transformer"]},{"cell_type":"markdown","metadata":{"id":"Zlf9096Hsp9b"},"source":["### Design a neural network"]},{"cell_type":"code","metadata":{"id":"UJgtdOYrsp9c","executionInfo":{"status":"ok","timestamp":1694493418135,"user_tz":-540,"elapsed":7,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["class MLP(nn.Module):\n","    def __init__(self, input_dim, hidden_dim, output_dim):\n","        super(MLP, self).__init__()\n","        self.linear_1 = nn.Linear(input_dim, hidden_dim)\n","        self.linear_2 = nn.Linear(hidden_dim, output_dim)\n","        self.relu = nn.ReLU()\n","    def forward(self, x):\n","        x = self.linear_1(x)\n","        x = self.relu(x) # Activation function\n","        x = self.linear_2(x)\n","        return x"],"execution_count":43,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Tr-1kleXsp9c"},"source":["**Activation function**\n","- nn.ReLU, nn.Sigmoid, nn.Tanh, ...\n","- They make non-linearity for deep neural networks $ Y = \\sigma_1(W_1 * \\sigma_2(W_2 * \\cdots \\sigma_N(W_N * X)\\cdots))$.\n","- Deep neural networks can approximate complex functions. Without activation functions, a multi linear layer network is just a linear model $ Y = W_1 * W_2 * \\cdots * W_N * X = W_{N+1} X$.\n","\n","![picture](https://www.baeldung.com/wp-content/uploads/sites/4/2022/04/activations.png)"]},{"cell_type":"markdown","source":["### The parameters of the network"],"metadata":{"id":"k_lIEG2SEAmF"}},{"cell_type":"code","source":["model = MLP(3, 4, 1)"],"metadata":{"id":"mldURpbZEJVT","executionInfo":{"status":"ok","timestamp":1694493418135,"user_tz":-540,"elapsed":7,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["for p in model.parameters():\n","    print(p)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eE8S-Gm7EF6p","outputId":"5965c09d-e4b5-4b8e-e15e-5faf5e8dd06f","executionInfo":{"status":"ok","timestamp":1694493418135,"user_tz":-540,"elapsed":7,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Parameter containing:\n","tensor([[-0.2130, -0.2992, -0.1819],\n","        [ 0.0341, -0.3623, -0.4044],\n","        [ 0.4316,  0.1763, -0.0063],\n","        [ 0.5396,  0.0678, -0.0161]], requires_grad=True)\n","Parameter containing:\n","tensor([-0.3378,  0.5308, -0.4019, -0.3959], requires_grad=True)\n","Parameter containing:\n","tensor([[0.2492, 0.2147, 0.1724, 0.3324]], requires_grad=True)\n","Parameter containing:\n","tensor([-0.2202], requires_grad=True)\n"]}]},{"cell_type":"code","source":["model.state_dict()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gUfU77d0Euip","outputId":"ec4b18ee-f3c1-4f05-e8b1-156f6be5a947","executionInfo":{"status":"ok","timestamp":1694493418135,"user_tz":-540,"elapsed":5,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["OrderedDict([('linear_1.weight',\n","              tensor([[-0.2130, -0.2992, -0.1819],\n","                      [ 0.0341, -0.3623, -0.4044],\n","                      [ 0.4316,  0.1763, -0.0063],\n","                      [ 0.5396,  0.0678, -0.0161]])),\n","             ('linear_1.bias', tensor([-0.3378,  0.5308, -0.4019, -0.3959])),\n","             ('linear_2.weight', tensor([[0.2492, 0.2147, 0.1724, 0.3324]])),\n","             ('linear_2.bias', tensor([-0.2202]))])"]},"metadata":{},"execution_count":46}]},{"cell_type":"markdown","source":["## Exercise (Train your model)\n","\n","![picture](https://www.baeldung.com/wp-content/uploads/sites/4/2022/04/artificial_neuron-1024x539.png)\n","\n","We will now implement a linear regression model. \\\n","We haven't learn about regression yet (we will learn about it in a later lab session), but don't worry, you will be able to solve this exercise even without understanding the concepts of regression.\n","\n","In this exercise, we will train a linear model approximating the following function:\n","\\begin{align*}\n","y=x^3-6x^2+11x-6\n","\\end{align*}\n","However, the linear model is:\n","\\begin{align*}\n","\\hat{y}=w_1*x_1 + w_2*x_2 + w_3*x_3 + b,\n","\\end{align*}\n","where $W=[w_1 w_2 w_3]$ is weights, and $b$ is the bias.\n","\n","How are you going to train the model?\n"],"metadata":{"id":"Zv2DHww1FksP"}},{"cell_type":"markdown","metadata":{"id":"Dr5dJKxOsp9e"},"source":["**Load packages**"]},{"cell_type":"code","metadata":{"id":"AEssd29Vsp9e","executionInfo":{"status":"ok","timestamp":1694493429920,"user_tz":-540,"elapsed":483,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import random\n","\n","seed = 7\n","random.seed(seed)\n","np.random.seed(seed)\n","torch.manual_seed(seed)\n","if torch.cuda.is_available():\n","    torch.cuda.manual_seed(seed)"],"execution_count":47,"outputs":[]},{"cell_type":"markdown","source":["**Generate data**\n","\n","The follow is the function we want to approximate."],"metadata":{"id":"KBvRFLk-vsCW"}},{"cell_type":"code","source":["x = np.linspace(0.5, 3.5, 100)\n","y = x**3 - 6*x**2 + 11*x - 6\n","\n","plt.plot(x, y, color='blue', label='Ground Truth')\n","plt.grid()\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"v9lfu55pQ6bJ","outputId":"b08476ff-21a7-4d8a-893a-0ade2cf7edd7","executionInfo":{"status":"ok","timestamp":1694493432734,"user_tz":-540,"elapsed":625,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":48,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Linear model**"],"metadata":{"id":"pM0NYUJHxj61"}},{"cell_type":"code","source":["class LinearModel(nn.Module):\n","    def __init__(self, input_dim, output_dim):\n","        super(LinearModel, self).__init__()\n","        self.linear = nn.Linear(input_dim, output_dim)\n","\n","    def forward(self, x):\n","        out = self.linear(x)\n","        return out"],"metadata":{"id":"Ycq3TLEIS9D8","executionInfo":{"status":"ok","timestamp":1694493435126,"user_tz":-540,"elapsed":2,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":49,"outputs":[]},{"cell_type":"markdown","source":["### **Exercise 1**. construct an appropriate model for this exercise."],"metadata":{"id":"jTknjm6IsGCr"}},{"cell_type":"code","source":["model = LinearModel(3, 1)"],"metadata":{"id":"ypHiJJUtT6-x","executionInfo":{"status":"ok","timestamp":1694493437303,"user_tz":-540,"elapsed":2,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":50,"outputs":[]},{"cell_type":"markdown","source":["### **Exercise 2**. How should you create input data for your linear model? your linear model"],"metadata":{"id":"09hi3TjHsBYT"}},{"cell_type":"code","source":["x_for_model = np.concatenate(((x**3).reshape(-1, 1), (x**2).reshape(-1, 1), x.reshape(-1, 1)), axis=1)\n","\n","class CustomDataset(Dataset):\n","    def __init__(self, x, y):\n","        self.x_data = torch.FloatTensor(x)\n","        self.y_data = torch.FloatTensor(y.reshape(-1, 1))\n","\n","    def __len__(self):\n","        return len(self.x_data)\n","\n","    def __getitem__(self, idx):\n","        return self.x_data[idx], self.y_data[idx]\n","\n","train_data = CustomDataset(x_for_model, y)\n","train_loader = DataLoader(train_data, batch_size=10, shuffle=True) # Total data size 100, mini batch size 10"],"metadata":{"id":"VsJwPnEHX_Dp","executionInfo":{"status":"ok","timestamp":1694493439245,"user_tz":-540,"elapsed":1,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":51,"outputs":[]},{"cell_type":"markdown","source":["### **Exercise 3**. complete the `plot_model` to plot your current model."],"metadata":{"id":"C_JtDr45sIvH"}},{"cell_type":"code","source":["def plot_model(model):\n","    with torch.no_grad():\n","        [w, b] = model.parameters()\n","        w = w.numpy()[0]\n","        b = b.numpy()\n","\n","        y_hat = w[0]*x**3 + w[1]*x**2 + w[2]*x + b\n","\n","    plt.plot(x, y_hat, color='red', label='your model')\n","    plt.plot(x, y, color='blue', label='Ground Truth')\n","    plt.grid()\n","    plt.legend()\n","    plt.show()\n","\n","print(\"your initial model: \", model.state_dict())\n","plot_model(model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"e-PA43cshjdW","outputId":"de86a458-5b71-4be1-ff8d-b4b8b260f0ee","executionInfo":{"status":"ok","timestamp":1694493441988,"user_tz":-540,"elapsed":901,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["your initial model:  OrderedDict([('linear.weight', tensor([[ 0.0403, -0.3478,  0.1838]])), ('linear.bias', tensor([0.1812]))])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAi8AAAGdCAYAAADaPpOnAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABqGElEQVR4nO3dd3iTZRcG8DvpLqWU2RYoe+9SNipllA2CCDJkCYgIyhI+UGSJMgQBZatQhsjeIlDKkj0rq+w9yhBpKYU2bd7vj2NaCi0k0OTNuH/X9V5J0zfJyUNoTp5xHo2iKAqIiIiIbIRW7QCIiIiITMHkhYiIiGwKkxciIiKyKUxeiIiIyKYweSEiIiKbwuSFiIiIbAqTFyIiIrIpTF6IiIjIpjirHUBG0+v1uHXrFjJnzgyNRqN2OERERGQERVHw6NEj5M6dG1rty/tW7C55uXXrFgICAtQOg4iIiF7D9evXkTdv3peeY9bkZezYsVi1ahXOnDkDDw8P1KhRA+PHj0fx4sVfer/ly5fj66+/xpUrV1C0aFGMHz8ejRs3Nuo5M2fODEBevLe39xu/hmfpdDps2bIF9evXh4uLS4Y+tr1hWxmPbWU8tpXx2FamYXsZz1xtFRMTg4CAgOTP8Zcxa/Kyc+dO9O7dG5UrV0ZiYiK+/PJL1K9fH6dPn0amTJnSvM/evXvRrl07jB07Fk2bNsXixYvRokULHD16FGXKlHnlcxqGiry9vc2SvHh6esLb25tv7ldgWxmPbWU8tpXx2FamYXsZz9xtZcyUD7MmL5s2bUr1c2hoKHLlyoUjR47gnXfeSfM+U6dORcOGDTFo0CAAwDfffIOwsDBMmzYNs2bNMme4REREZAMsOuclOjoaAJAtW7Z0z9m3bx8GDBiQ6rYGDRpgzZo1aZ4fHx+P+Pj45J9jYmIASGao0+neMOLUDI+X0Y9rj9hWxmNbGY9tZTy2lWnYXsYzV1uZ8ngaRVGUDH32dOj1ejRv3hwPHz7E7t270z3P1dUV8+fPR7t27ZJvmzFjBkaNGoU7d+68cP7IkSMxatSoF25fvHgxPD09MyZ4IiIiMqu4uDi0b98e0dHRr5z2YbGel969e+PkyZMvTVxex9ChQ1P11Bgm/NSvXz/dF68oCpKSkpCUlARTcrfExETs3bsXNWrUgLOz3S3UylC23lYajQZOTk5wcnIy+5J7nU6HsLAwhISEcKz9FdhWxmNbmYbtZTxztZVh5MQYFvlU6dOnDzZs2IBdu3a9cvmTn5/fCz0sd+7cgZ+fX5rnu7m5wc3N7YXbXVxc0mzUhIQE3L59G3FxcSa8AqEoCvz8/HD79m3WkHkFe2krT09P+Pv7w9XV1ezPld57ll7EtjIe28o0bC/jZXRbmfJYZk1eFEXBZ599htWrV2PHjh0oWLDgK+9TvXp1hIeHo1+/fsm3hYWFoXr16m8cj16vx+XLl+Hk5ITcuXPD1dXVpA9WvV6P2NhYeHl5vbKAjqOz9bZSFAUJCQm4d+8eLl++jKJFi9rk6yAiskdmTV569+6NxYsXY+3atcicOTOioqIAAFmyZIGHhwcAoFOnTsiTJw/Gjh0LAOjbty9q1aqFSZMmoUmTJliyZAkOHz6MOXPmvHE8CQkJ0Ov1CAgIeK35MHq9HgkJCXB3d+cH2SvYQ1t5eHjAxcUFV69eTX4tRESkPrN+qsycORPR0dEIDg6Gv79/8rF06dLkc65du4bbt28n/1yjRg0sXrwYc+bMQfny5bFixQqsWbPGqBovxrLVD1OyPL5XiIisj9mHjV5lx44dL9zWunVrtG7d2gwRERERka3j10qyaleuXIFGo0FERITR9wkODk41Z4qIiOwLkxciIiKyKUxeKF2KoiAxMVHtMIiIiFJh8mIDFixYgOzZs6faBgEAWrRogY4dOyb/PHPmTBQuXBiurq4oXrw4Fi5cmPy7tIZfHj58CI1GkzzvaMeOHdBoNPjzzz8RFBQENze3NIsKGh5r2bJlePvtt+Hh4YHKlSvj3LlzOHToECpVqgRvb2+8//77uHfvXvL99Ho9Ro8ejbx588LNzQ0VKlR4Yf+rgwcPIjAwEO7u7qhUqRKOHTv2wvOfPHkSjRo1gpeXF3x9fdGxY0fcv3/fpDYlIiLTPXkCtGrlhE2bCkDN77ZMXhQFePxYncPI6r6tW7dGUlIS1q1bl3zb3bt38ccff+Cjjz4CAKxevRp9+/bFwIEDcfLkSfTs2RNdu3bF9u3bTW6SIUOGYNy4cYiMjES5cuXSPW/EiBEYNmwYjh49CmdnZ7Rv3x6DBw/G1KlTsXPnTly+fBkjRoxIPn/q1KmYNGkSJk6ciOPHj6NBgwZo3rw5zp8/DwCIjY1F06ZNUapUKRw5cgQjR47EF198keo5Hz58iDp16iAwMBCHDx/Gpk2bcOfOHbRp08bk10lERKYJDwfWr9di5cqicHJSLw7bq9ue0eLiAC8vo07VAvDJyOeOjQUyZXrlaR4eHmjfvj3mzZuXvApr0aJFyJcvH4KDgwEAEydORJcuXfDpp58CAAYMGID9+/dj4sSJqF27tklhjR49GiEhIa8874svvkCDBg0ASH2edu3aITw8HDVr1oRer8eHH36Yaln8xIkT8b///Q9t27YFAIwfPx7bt2/HlClTMH36dCxevBh6vR6//vor3N3dUbp0ady4cQO9evVKfoxp06YhMDAQ3333XfJtc+fORUBAAM6dO4dixYqZ9FqJiMh4GzbIZaVKd6DRvLxivjmx58VG9OjRA1u2bMHNmzcBAKGhoejSpUtyheDIyEjUrFkz1X1q1qyJyMhIk5+rUqVKRp33bK+Mr68vAKBs2bLJt+XKlQt3794FIHtW3Lp166UxGnp6ni0G93xl5b///hvbt2+Hl5dX8lGiRAkAwMWLF419iUREZCJFSUleKleOUjUW9rx4ekoPiBH0ej1iYmLg7e2dMcXLTKjyGxgYiPLly2PBggWoX78+Tp06hT/++MPo+xvifbb2Tnrbj2cyojcISL0PhSGJev42vV5vdIzGiI2NRbNmzTB+/PgXfufv75+hz0VERCkiIoCbN4FMmRSUKaPuPEMmLxqNUUM3AAC9HkhKkvNVqLzavXt3TJkyBTdv3kS9evUQEBCQ/LuSJUtiz5496Ny5c/Jte/bsQalSpQAAOXPmBADcvn0bgYGBAGBS7ZQ35e3tjdy5c2PPnj2oVatWqhirVKkCQF7DwoUL8fTp0+Tel/3796d6nIoVK2LlypUoUKCATe5WTURkq9avl8u6dRW4umbsF1NTcdjIhrRv3x43btzAzz//nDxR12DQoEEIDQ3FzJkzcf78efzwww9YtWpV8oRXDw8PVKtWLXki7s6dOzFs2DCLxj9o0CCMHz8eS5cuxdmzZzFkyBBERESgb9++ya9Po9GgR48eOH36NDZu3IiJEyemeozevXvjwYMHaNeuHQ4dOoSLFy9i8+bN6Nq1K5KSkiz6eoiIHIlhyKhJE3UTF4DJi03JkiULWrVqBS8vL7Ro0SLV71q0aIGpU6di4sSJKF26NGbPno158+YlT+gFZGJrYmIigoKC0K9fP4wZM8ai8X/++ecYMGAABg4ciLJly2LTpk1Yt24dihYtCgDw8vLC+vXrceLECQQGBuKrr756YXjI0HuTlJSE+vXro2zZsujXrx98fHy4DxERkZncvg0cOiTXGzY0bqWsObHf3cbcvHkTHTp0gJub2wu/69WrV6qVOc8rWbIk9u7dm+q2Z+fABAcHG7UfVYECBV44L637tm/fHp988knyz1qtFiNGjEi1fPp51apVe2E46/nHLVq0KFatWpXuY6S1XxYREb2+jRvlsnJlwN8fSKMEl0UxebER//77L3bs2IEdO3ZgxowZaodDREQOxDDfpWlTdeMwYPJiIwIDA/Hvv/9i/PjxKF68uNrhEBGRg3j6FAgLk+vNmqkbiwGTFxtx5coVtUMgIiIHtH271HPNkweoUAGqbgtgwBmORERElC7DKqOmTaW6iDVg8kJERERpUhTrm+8CMHkhIiKidJw4AVy/Dnh4AHXrqh1NCiYvRERElKaUqrqSwFgLJi9ERESUJkPyYi2rjAyYvBAREdELbt0CDhyQ69Y03wVg8kIWMHLkSFSoUEHtMABIJeB+/fqpHQYRkdVbt04uq1UDcudWN5bnMXmxIVFRUejbty+KFCkCd3d3+Pr6ombNmpg5cybi4uLUDu+1jBw5EhqN5qXH69ixYwc0Gg0ePnyYsQETETmINWvk8rmt9KwCi9TZiEuXLqFmzZrw8fHBd999h7Jly8LNzQ0nTpzAnDlzkCdPHjRv3jzN++p0Ori4uFg4YuN88cUXqfY/qly5Mj7++GP06NEjzfMTEhLg6upqqfCIiBxSdDSwbZtct8bkhT0vNuLTTz+Fs7MzDh8+jDZt2qBkyZIoVKgQ3n33Xfzxxx9o9sxsKo1Gg5kzZ6J58+bIlCkTvv32WwDAzJkzUbhwYbi6uqJ48eJYuHBh8n2uXLkCjUaTalPEhw8fQqPRJG90aOjNCA8PR6VKleDp6YkaNWrg7NmzqWIdN24c/P39ERAQgO7du+Pp06fpvi4vLy/4+fklH05OTsicOXPyz23btkWfPn3Qr18/5MiRAw0aNHhlrFeuXEHt2rUBAFmzZoVGo0GXLl2Sz9Xr9Rg8eDCyZcsGPz8/jBw50sR/DSIi+7ZxI6DTASVLAta4I43DJy+KAjx+rM5hxAbOAIB//vkHW7ZsQe/evZEpU6Y0z3l+eGXkyJFo2bIlTpw4gY8++girV69G3759MXDgQJw8eRI9e/ZE165dsX37dpPb7KuvvsKkSZNw+PBhODs746OPPkr+3bJlyzBy5EiMGTMG27Ztg7+//xtvJDl//ny4urpiz549mDVr1ivPDwgIwMqVKwEAZ8+exe3btzF16tRUj5cpUyYcOHAAEyZMwOjRoxFm2LiDiIisesgI4LAR4uIALy9jz9YC8Mmw546NBdLJRVK5cOECFEV5YUPGHDlyJPdq9O7dG+PHj0/+Xfv27dG1a9fkn9u1a4cuXbrg008/BQAMGDAA+/fvx8SJE5N7KYz17bffolatWgCAIUOGoEmTJnj69Cnc3d0xZcoUdOvWDd26dUNMTAy++eYbhIeHv7T35VWKFi2KCRMmJP/8qn2enJyckC1bNgBArly54OPjk+r35cqVw4gRI5Ife9q0aQgPD0dISMhrx0hEZC+ePpWeF8B6kxeH73mxZQcPHkRERARKly6N+Pj4VL+rVKlSqp8jIyNRs2bNVLfVrFkTkZGRJj9vuXLlkq/7+/sDAO7evZv8PFWrVk11fvXq1U1+jmcFBQW90f2f92z8gLwGQ/xERI5u2zb5cp07N/DcR4nVcPieF09P+Ucyhl6vR0xMDLy9vaHVvnne5+lp3HlFihSBRqN5YW5JoUKFAAAeaZQ9TG94KT2G16M8M5al0+nSPPfZyb+G4Sq9Xm/S85ni+ddiSqxpeX7yskajMWv8RES25Nkhowz4qDMLKw3LcjQaGbpR4zB2FXD27NkREhKCadOm4fHjx6/1OkuWLIk9e/akum3Pnj0oVaoUACBnzpwAgNu3byf//tkJsaY8zwFDVaP/7N+/3+THeRljYjWsSEpKSsrQ5yYismdJScDatXLdWoeMAPa82IwZM2agZs2aqFSpEkaOHIly5cpBq9Xi0KFDOHPmzCuHVgYNGoQ2bdogMDAQ9erVw/r167Fq1Sps3boVgPTeVKtWDePGjUPBggVx9+5dDBs2zOQ4+/btiy5duqBixYooX7481q1bh1OnTiX3EmUEY2LNnz8/NBoNNmzYgMaNG8PDwwNexk9uIiJySPv3A3fvAlmyAP9NbbRKDt/zYisKFy6MY8eOoV69ehg6dCjKly+PSpUq4aeffsIXX3yBb7755qX3b9GiBaZOnYqJEyeidOnSmD17NubNm4fg4ODkc+bOnYvExEQEBQWhX79+GDNmjMlxfvDBB/j6668xZMgQ1K5dG1evXkWvXr1MfpxXeVWsefLkwahRozBkyBD4+vqiT58+GR4DEZG9MQwZNW0KWHNJLY2iGLtg1zbExMQgS5YsiI6Ohre3d6rfPX36FJcvX0bBggXh7u5u8mNn9JwXe2YvbfWm7xlj6HQ6bNy4EY0bN7baYoLWgm1lPLaVadheUr6jaFHg4kVg+XLg/ffTPs9cbfWyz+/n2e6nChEREWWYU6ckcXFzAxo2VDualzNr8rJr1y40a9YMuXPnhkajwRpDf1Q6DBVcnz+ioqLMGSYREZHDW7VKLkNCTKl/pg6zJi+PHz9G+fLlMX36dJPuZ6iKajhy5cplpgiJiIgIkKEiIP3hImti1tVGjRo1QqNGjUy+X1pVUYmIiMg8zpwBTp4EXFyAdPb4tSpWuVS6QoUKiI+PR5kyZTBy5MgXKsM+Kz4+PlV12ZiYGAAyoej5wmU6nQ6KokCv179WUTLD3GbDY1D67KWt9Ho9FEWBTqeDk5OTWZ7D8D41pdCeo2JbGY9tZRpHb6+lS7UAnFC3rh5eXkl4WTOYq61MeTyrSl78/f0xa9YsVKpUCfHx8fjll18QHByMAwcOoGLFimneZ+zYsRg1atQLt2/ZsgWez5WwdXZ2hp+fHx49eoSEhITXjvPRo0evfV9HY+ttFR8fjydPnmDXrl1ITEw063Nxc0jjsa2Mx7YyjaO2V2hoMIAsKFLkb2zceM2o+2R0W8XFxRl9rsWWSms0GqxevRotTCzZV6tWLeTLlw8LFy5M8/dp9bwEBATg/v37Lyy1SkpKwqVLl5AzZ05kz57d5NegKAoePXqEzJkzv7CLM6VmL231zz//4N69eyhUqJBZe17CwsIQEhLisEs0jcW2Mh7byjSO3F7nzwOlS7vAyUnBjRuJeNXHo7naKiYmBjly5DBqqbRV9bykpUqVKti9e3e6v3dzc4Obm9sLt7u4uLzQqC4uLsiaNSvu378PrVYLT09Pkz5Y9Xo9EhISEB8fb9O1SyzB1ttKURTExcXh/v37yJo1q9lqvDwrrfcspY1tZTy2lWkcsb0M2wHUrauBn5/xrz2j28qUx7L65CUiIiJ55+KM4OfnBwCvtYuwoih48uQJPDw8bLo3wRLspa18fHyS3zNERPZoxQq5tIVVRgZmTV5iY2Nx4cKF5J8vX76MiIgIZMuWDfny5cPQoUNx8+ZNLFiwAAAwZcoUFCxYEKVLl8bTp0/xyy+/YNu2bdiyZUuGxaTRaODv749cuXKZPNlIp9Nh165deOeddxwuMzeVPbSVi4uL2YaKiIiswaVLwNGjgJMT0LKl2tEYz6zJy+HDh1G7du3knwcMGAAA6Ny5M0JDQ3H79m1cu5YyMSghIQEDBw7EzZs34enpiXLlymHr1q2pHiOjODk5mfzB5OTkhMTERLi7u9vsB7KlsK2IiKyfodclOBjIkUPVUExi1uQlODgYL5sPHBoamurnwYMHY/DgweYMiYiIiP5jSF5at1Y3DlPZ3kxKIiIiemNXrgCHDgFaLWDiQmDVMXkhIiJyQCtXyuU77wC+vurGYiomL0RERA7IsJeRrQ0ZAUxeiIiIHM7ly8CBAzJkZEurjAyYvBARETmYJUvkMjgYyMBSahbD5IWIiMjB/P67XLZrp24cr4vJCxERkQM5dQo4cQJwcQFatVI7mtfD5IWIiMiBGHpdGjYEsmZVN5bXxeSFiIjIQSiK7Q8ZAUxeiIiIHMbhw7Kfkacn0Ly52tG8PiYvREREDsLQ69K8OZApk7qxvAkmL0RERA4gKQlYulSu2/KQEcDkhYiIyCH89Rdw6xbg4wM0aKB2NG+GyQsREZEDMAwZtWoFuLmpG8ubYvJCRERk5xISgBUr5LqtDxkBTF6IiIjsXlgY8OAB4OcnWwLYOiYvREREdm7RIrls0wZwclI3lozA5IWIiMiORUcDa9bI9U6dVA0lwzB5ISIismMrVgBPnwKlSgEVK6odTcZg8kJERGTHFi6Uy44dAY1G3VgyCpMXIiIiO3XlCrBzpyQtHTqoHU3GYfJCRERkpwwTdevUAQIC1I0lIzF5ISIiskOKAixYINftZaKuAZMXIiIiO3TwIHD+vOwg/d57akeTsZi8EBER2SFDr8t77wFeXurGktGYvBAREdmZ+HhgyRK5bm9DRgCTFyIiIruzcaNsB5A7t0zWtTdMXoiIiOyMobZLhw72sR3A85i8EBER2ZH794ENG+R6x47qxmIuTF6IiIjsyMKFgE4HBAUBZcuqHY15MHkhIiKyE4oC/PqrXO/eXd1YzInJCxERkZ04eBA4dQrw8ADatVM7GvNh8kJERGQnDL0u778PZMmibizmxOSFiIjIDsTGAr//Lte7dVM3FnMza/Kya9cuNGvWDLlz54ZGo8GaNWteeZ8dO3agYsWKcHNzQ5EiRRAaGmrOEImIiOzC8uWSwBQpArzzjtrRmJdZk5fHjx+jfPnymD59ulHnX758GU2aNEHt2rURERGBfv36oXv37ti8ebM5wyQiIrJ5hiGjjz4CNBp1YzE3Z3M+eKNGjdCoUSOjz581axYKFiyISZMmAQBKliyJ3bt3Y/LkyWjQoIG5wiQiIrJpZ84Ae/YAWi3QubPa0ZifWZMXU+3btw/16tVLdVuDBg3Qr1+/dO8THx+P+Pj45J9jYmIAADqdDjqdLkPjMzxeRj+uPWJbGY9tZTy2lfHYVqax9fb6+WctACc0bKhHzpxJMOfLMFdbmfJ4VpW8REVFwdfXN9Vtvr6+iImJwZMnT+Dh4fHCfcaOHYtRo0a9cPuWLVvg6elpljjDwsLM8rj2iG1lPLaV8dhWxmNbmcYW2ysxUYNff60PwAnlyh3Cxo1RFnnejG6ruLg4o8+1quTldQwdOhQDBgxI/jkmJgYBAQGoX78+vL29M/S5dDodwsLCEBISAhcXlwx9bHvDtjIe28p4bCvjsa1MY8vttXatBtHRzvD1VfD11xVh7vDN1VaGkRNjWFXy4ufnhzt37qS67c6dO/D29k6z1wUA3Nzc4Obm9sLtLi4uZnsDmvOx7Q3bynhsK+OxrYzHtjKNLbbX3Lly2bmzBp6elos9o9vKlMeyqjov1atXR3h4eKrbwsLCUL16dZUiIiIisl6XLwObNsn1Hj3UjcWSzJq8xMbGIiIiAhEREQBkKXRERASuXbsGQIZ8OnXqlHz+J598gkuXLmHw4ME4c+YMZsyYgWXLlqF///7mDJOIiMgmzZ4t+xnVry/1XRyFWZOXw4cPIzAwEIGBgQCAAQMGIDAwEMOHDwcA3L59OzmRAYCCBQvijz/+QFhYGMqXL49Jkybhl19+4TJpIiKi58THp9R26dVL3VgszaxzXoKDg6EoSrq/T6t6bnBwMI4dO2bGqIiIiGzfypXA/ftA3rxA06ZqR2NZVjXnhYiIiIwzc6Zc9ugBOFvV8hvzY/JCRERkY06cAHbvBpycgO7d1Y7G8pi8EBER2ZjZs+WyRQsgd25VQ1EFkxciIiIbEhsLLFgg1x1toq4BkxciIiIbsngx8OgRULQoULu22tGog8kLERGRjVCUlIm6n3wiu0g7Igd92URERLZn714gIgJwdwe6dFE7GvUweSEiIrIRU6fKZYcOQLZs6saiJiYvRERENuD6dWDVKrnet6+6saiNyQsREZENmD4dSEoC6tQBypZVOxp1MXkhIiKyco8fA3PmyHVH73UBmLwQERFZvUWLgH//BQoVApo0UTsa9TF5ISIismKKkjJR97PPZEsAR8fkhYiIyIqFhQGRkYCXF9C1q9rRWAcmL0RERFbM0Ovy0UdAlizqxmItmLwQERFZqXPngI0bAY1GhoxIMHkhIiKyUj/+KJdNmgBFiqgbizVh8kJERGSF7t8H5s6V6/36qRqK1WHyQkREZIWmTweePAGCgqQwHaVg8kJERGRlHj8GfvpJrg8eLHNeKAWTFyIiIiszbx7wzz9SlO6999SOxvoweSEiIrIiiYnApEly/YsvAGdndeOxRkxeiIiIrMiKFcCVK0DOnECXLmpHY52YvBAREVkJRQHGj5frn30GeHioG4+1YvJCRERkJbZuBSIiAE9PoHdvtaOxXkxeiIiIrMSECXLZoweQLZu6sVgzJi9ERERW4MgR6XlxcgL691c7GuvG5IWIiMgKfPONXLZvD+TPr24s1o7JCxERkcoiIoC1awGtFvjqK7WjsX5MXoiIiFQ2Zoxctm0LFC+ubiy2gMkLERGRik6eBFaulC0A2OtiHCYvREREKjLMdWndGihVSt1YbAWTFyIiIpWcPg0sXy7Xhw1TNxZbwuSFiIhIJd9+K1V133sPKFtW7Whsh0WSl+nTp6NAgQJwd3dH1apVcfDgwXTPDQ0NhUajSXW4u7tbIkwiIiKLOXsWWLJErn/9tbqx2BqzJy9Lly7FgAEDMGLECBw9ehTly5dHgwYNcPfu3XTv4+3tjdu3bycfV69eNXeYREREFvXtt4BeDzRvDlSooHY0tsXsycsPP/yAHj16oGvXrihVqhRmzZoFT09PzJ07N937aDQa+Pn5JR++vr7mDpOIiMhiTp8GfvtNrrPXxXTO5nzwhIQEHDlyBEOHDk2+TavVol69eti3b1+694uNjUX+/Pmh1+tRsWJFfPfddyhdunSa58bHxyM+Pj7555iYGACATqeDTqfLoFeC5Md89pLSx7YyHtvKeGwr47GtTGPp9vrySyfo9Vq0aKFH+fJJsKV/JnO1lSmPp1EURcnQZ3/GrVu3kCdPHuzduxfVq1dPvn3w4MHYuXMnDhw48MJ99u3bh/Pnz6NcuXKIjo7GxIkTsWvXLpw6dQp58+Z94fyRI0di1KhRL9y+ePFieHp6ZuwLIiIiekPnz/tg0KBa0GoVTJ26HQEBj9QOySrExcWhffv2iI6Ohre390vPNWvPy+uoXr16qkSnRo0aKFmyJGbPno1vDIvhnzF06FAMGDAg+eeYmBgEBASgfv36r3zxptLpdAgLC0NISAhcXFwy9LHtDdvKeGwr47GtjMe2Mo0l26tRIycAQIcOCnr2fNusz2UO5morw8iJMcyavOTIkQNOTk64c+dOqtvv3LkDPz8/ox7DxcUFgYGBuHDhQpq/d3Nzg5ubW5r3M9cb0JyPbW/YVsZjWxmPbWU8tpVpzN1e27YB4eGAiwswerQWLi62W7Eko9vKlMcya6u5uroiKCgI4eHhybfp9XqEh4en6l15maSkJJw4cQL+/v7mCpOIiMjsFAX48ku53rMnUKCAquHYNLMPGw0YMACdO3dGpUqVUKVKFUyZMgWPHz9G165dAQCdOnVCnjx5MHbsWADA6NGjUa1aNRQpUgQPHz7E999/j6tXr6J79+7mDpWIiMhs1q0DDhwAPD25h9GbMnvy8sEHH+DevXsYPnw4oqKiUKFCBWzatCl5+fO1a9eg1aZ0AP3777/o0aMHoqKikDVrVgQFBWHv3r0oxQ0fiIjIRiUlpZT/79sXMHLmBKXDIhN2+/Tpgz59+qT5ux07dqT6efLkyZg8ebIFoiIiIrKMRYtk92gfH2DQILWjsX22O1OIiIjIBjx+nDLXZcgQIGtWdeOxB1a3VJrIlul0MilPo0k5tFq5JCLHNHEicOuWTNDt21ftaOwDkxciI8THyyZqly4Bly/LceUKcPcu8PChHNHRwNOnL97XyUm6in185BtX1qxAnjxA/vxy5MmjwZ07HtDrLfqSiMgCbt4EJkyQ6+PHA9xnOGMweSF6jl4P/P03cPAgcOQIcPiwjFW/biXspCTgn3/kSJszgPoYOFBBmTJA2bJyVKoEVKwIpFHGiIhsxLBhQFwcUKMG0Lq12tHYDyYvRJBvR2FhwJYtcnn//ovn+PgARYoABQvKUaAA4O8vPSlZssjvM2eWnhZFkQMAnjxJ6Z15+FCSmOvXgatX5bhyRcGlSwpiY7XYvx/Yvz/lOV1dJYmpUQOoWRMIDpbnISLrd/QoMH++XP/hBw4fZyQmL+Swbt0Cli4FFi+W3pVneXlJwhAUlHLkz//6f3zy5En/dzpdItat+xNFijTCmTMuOHFCen4OHADu3QP27pVj4kRJjKpWBerXl6NyZcCZ/4uJrI6iAAMGyGX79vL/ljIO/+yRQ3n8GFiyRLai37EjpXdEq5VEwJAUVK0q5bstxdlZQalSQPnywAcfyG2KAly8mJK87Ngh824MP48cCWTPDjRvDrz3HlCvHsfTiazF2rXAzp3yf/K/GqyUgZi8kEO4cgWYPh345RcZujGoWVO+Fb3/PpArl1rRpU2jkWGqIkWATp3ktqtXU4a3tm6VIah58+Tw8gIaN5bX06iRDDkRkeU9fQp88YVcHzAAyJdP3XjsEZMXsmuG4Za1a5G8mqdQIaBHD6BdOxkKsiX58wPdu8uRmAj89RewahWwerXM21m2TI5s2YA2bYAPP5ThL461E1nO999Lr6m/v9R1oYzHInVklw4flt6HmjXlg12vB0JCgPXrgXPn5A+KrSUuz3N2BmrXBn76Cbh2TebIDBwI5M4NPHgAzJoFvPWW9NyMGwdERakdMZH9u3wZ+O47uf7DDzKJnzIekxeyK8ePAy1ayPyVTZtkgmu3bsCpUzLU0rSp3GZvtFqgShXpZbp2TYaUunSRoaRLl4ChQ4GAAKBVK2kX1pQhMo/PP5dhozp1UuavUcZj8kJ24f594OOPgQoVZIhIq5V5ImfPyjwXR9rX08kJqFtX5sFERcll9eoyzLRqlfRIFS8O/PgjEBOjdrRE9mPdOmDDBpnsP306h2vNickL2bSkJGDOHPkw/vlnWaHTpo30tMyfDxQurHaE6sqUSXpg9u4FTpyQb4VZsgAXLkiZ8rx55fLCBbUjJbJtcXHy/wuQ4dsSJdSNx94xeSGbdeSI9Cj07ClzPMqVkwmsS5fyD0daypQBpk4FbtwAZsyQNnr0SHpgihWTFVeHDqkdJZFt+u47WQ2YL59U1SXzYvJCNkenA0aMkFoshw4B3t7yoXzkiExQpZfz8gJ69ZLeqc2bZRhJUYCVK2XeTO3aMi/GUAOHiF7u3DlZYQQAU6ZIjyeZF5MXsilnzsjS39GjZcjogw9kXsvnn7PSrKm0WinIt3GjDCl16iRtuGOHJDRBQSkrtYgobXq9lF5ISJD/Ny1aqB2RY2DyQjZBr5fhjcBAWQadNatUyl2yBPDzUzs621emjMwRunQJ6N9fvjkeOyaVeytUkNoxSUlqR0lkfWbPBnbtkv8zM2Zwkq6lMHkhq/fwoXyb6dtXliDWry89BVyGmPECAqQ2xZUrwFdfSY0KQ1uXLQssX86eGCKDq1eBwYPl+tixslkrWQaTF7JqJ09KzZb16wE3N2DaNJmP8bKNDunN5cgBjBkjf5xHjJCdrCMjZSVXUJAsB+WcGHJkiiKLBWJjpRhm795qR+RYOEvAWP/8A6cPPkBQQgK04eEyVpErlxx+fnL4+sonLGWIJUukwFxcnMzgX7kSqFRJ7agcS9assgFk//7A5MnSKxMRATRrJhOmv/1WasoQOZoFC2TCu5sb8OuvMoeMLIfJi7GioqAND0deQNbjpidbNtnQIk8eOXLnlmIaAQEph48PB0ZfIikJGDRIPiwBKeu/eLH0BpA6smSRJOazz2RVxY8/ynYE9erJMN64cTIficgRREVJQg/I/4vixVUNxyExeTGWvz8S581D5F9/oVT27HD65x/g7l3gzh05oqJkuvmDB3KcOpX+Y3l5SVdCgQJyFCyYclm4sCQ3DiouTnZFXrtWfv7yS1lZZI8l/W1R9uySqPTrJ3UtZs2SbRe2bAHatpWhJkcvDEj2TVFkiOjff4GKFVN2jybLYvJirGzZoHTogEtZs6JE48ZwcnFJ/XtFkXfz7dty3LyZcty4AVy/Lsf9+zJIevq0HGnJmlU+AQoVAooWTX3kyGG3vTb378twxP790hW7cCHQurXaUVFa/Pyk96VfP2D4cOC332SYb8UK4NNPga+/Zk8Z2aeFC2WbDWdnYO5clmhQC5s9o2g0MmSULRtQunT658XFSRJz7Zos6TAcly/LERUlSdDhw3I8L2tW6aM0HCVKyMY9hQvb9P+iixelRsL58/IS164F3n5b7ajoVQoVAhYtkm+fQ4bIHIAff5Rl1199JcNM7u5qR0mUMS5fBvr0kesjRwLly6sajkOz3U87W+XpmZJ4pOXxY/kfcvGibDhz/nzKcf26JDb798vxLBcXqfFeqpQkT2XKyGEDSc2RI5K43LsH5M8P/PknULKk2lGRKSpUkFVgYWEyX+nvv2UJ6fTpMsz0wQd222FIDiIxEfjwQ9lS4623JFkn9Vj3p5ojypQpJfF43pMnktCcOSNlZc+ckSMyUnp0Tp2SY/nylPu4uUkmUK6cfE0wXObMabnX9BIHDgANGgDR0TJ+/McfLDpny0JCJBlduFB6Xq5eBdq1k96YKVNk+wEiWzRunGxw6u0t72/Ow1MXkxdb4uEhlcLKlk19u14vvTKnT6ckMCdPyuWTJ7K2NSIi9X38/eXrcmBgylGokEW/Hu/dCzRsKN9k3n5bEpfMmS329GQmTk6yk3WbNsCkSfJHf98+WVrdsaNM9M2bV+0oiYx38KAMEwHSm8hidOpj8mIPtFoZb8mfX8ZfDPR6GYI6flzKpP79t1y/cCFlYvGff6acnyWLdH8EBaUcRYqYJaH56y+gcWOZu1y7thSh42Zm9sXTUybudusmq8bmz5dvrCtXSpf7F19IPk5kzWJjgQ4dpIRD27ZyndTH5MWeabUy56VwYaBly5TbY2MliYmIkA1sjh2T5CY6Gti+XQ4DHx8pcWs4qlaVXps3sH070LSpjHTVqyeTcz093+ghyYrlzg2EhspEx/79gd27ZYXSr78CEycCrVpxPgxZJ0WR9+2FC1Kia+ZMvletBZMXR+TlJVsz16iRcptOJ8NMR46kHH//LRsLhYXJYRAQAFSrJolMtWrSQ2PkkpLdu4EmTWQ0q2FDWXLIb9+OoVIl2cBu2TKZ1Hv1qiyFDw4Gpk6V6VhE1uSXX6THUKuVXkMHLsFldZi8kHBxkTkwFSpIPz8gRfdOnpQB30OH5PL06ZSaNYaJwS4uMtxUvXpKUpQr1wtPcfy49Lg8eSKjW6tWcRmto9FoZOVRs2bA+PHAhAnAjh0y5apXLylImC2b2lESAUePylJ/QOZp1aqlbjyUGpMXSp+rqyQlFSsCn3witz16JPVnDhyQY98+qTBs+HnKFACAc4ECqJg/P7Q3bgC1auGSeyk0aKBFdLQsM1yxgomLI/P0BEaNArp2lV6YFStkIuSSJfJB0a0bV3OQev79V4Yz4+OB5s3lPUrWhckLmSZzZplhW7u2/KwoUmRv715JZPbuBf7+G5orVxBw5Qqwcyei4IsQ7T5E6QuinP9drB91A56u5cC3HxUoIB144eHA559Lx17PnsDs2bKDePXqakdIjkavBzp1kj9rBQvKfC1uumh9LPJPMn36dBQoUADu7u6oWrUqDh48+NLzly9fjhIlSsDd3R1ly5bFxo0bLREmvQ6NRv6Hd+ggnzZHjwIPHyJx40ac+eADPHi7GRpownBJXxCFcBGbbpeHT90gKaPbqJGMHRw4IHNuyGHVrSvzx6dMkToaR4/K6GPXrtKxR2QpEydqsWGDlMhauVL+VJH1MXvysnTpUgwYMAAjRozA0aNHUb58eTRo0AB3795N8/y9e/eiXbt26NatG44dO4YWLVqgRYsWOHnypLlDpYySOTOUevVw8v32aKlZg+NKWfhlT0DYkG3wb1ZZZr3FxkpJ1iFDZNJvtmyydnriRPnkSkpS+1WQhbm4AH37AufOAR99JLeFhkox6h9/lAqnROZ05EguDB8uH4vTpnGndKummFmVKlWU3r17J/+clJSk5M6dWxk7dmya57dp00Zp0qRJqtuqVq2q9OzZ06jni46OVgAo0dHRrx90OhISEpQ1a9YoCQkJGf7Y9iY+PkGpV++KAihK5syKEhHxzC+TkuSGKVMUpUULRcmaVVFkACrl8PGR302bpihnziiKXq/aazE3vq/Stm+fogQFpbwlypZVlPBwHdvKSHxfmebYsQTFwyNBARSlWze7/pPzxsz13jLl89uskw4SEhJw5MgRDB06NPk2rVaLevXqYd++fWneZ9++fRgwYECq2xo0aIA1a9akeX58fDzi4+OTf46JiQEA6HQ66DJ4KMLweBn9uPZo0iQFW7fmh1arYNGiJJQqpaQeGSpVSo5PP5VB5uPHod25E5rt26HZvRuahw+BNWvkAKDkzQulTh3o69aFUrdumquZbBXfV2kLCpKl9fPmaTBsmBNOnNCgbl1nvPNORZQpk4h8+dSO0LrxfWW8e/eAli2d8OSJFm+9lYSpU/Xs6XsJc723THk8syYv9+/fR1JSEnx9fVPd7uvrizNnzqR5n6ioqDTPj4qKSvP8sWPHYtSoUS/cvmXLFniaqfJZ2LM1T+gFhw754rvvqgIAunQ5CUW5BKOmLRUtChQtCk23bvC5eBE5jh9Hzr//RrbISDjduAHNggXQLlgAAHhYsCDuVaiAuxUq4EGpUtC7uJjxFVkG31dpy50bmDLFBYsXl8TmzQWwa1cAypRJRNu2Z9C06SU4Oytqh2jV+L56OZ1Oi+HDa+DKlezw9X2Mjz/eha1bE9QOyyZk9HsrLi7O6HNtfrnH0KFDU/XUxMTEICAgAPXr14e3t3eGPpdOp0NYWBhCQkLgYgcfluZw/Djw4YfOUBQN6te/gh9/LAxX1xJv9Jj6uDgoe/dCs3UrtOHh0Pz9N3wuX4bP5csouno1FE9PKLVqQalfH/qQEEmCbKgMJt9XxmnbFjh48Ck++ugJzp3LhtDQMti/vzQmT05C3bpMYJ7H99WrKQrQo4cTIiO18PZWMGzYfrRqVYvt9Qrmem8ZRk6MYdbkJUeOHHBycsKd55YL3LlzB37pbB3s5+dn0vlubm5wc3N74XYXFxezvQHN+di27N494L33DPsV6fHxx8fh6trozdsqSxZZmWTYt+nuXWDrVmDLFmDzZmiioqD580/gzz/hBMgGk40ayQTg4GCb2XuA76tXq1IFGDfuL/zzTxN8+aUzzpzRoFEjZ7z/vmwCyaGkF/F9lb6xY4EFC2Qp9OLFSUhMjGV7mSCj28qUxzLraiNXV1cEBQUhPDw8+Ta9Xo/w8HBUT6eAQ/Xq1VOdD0jXVHrnk3VISgLatweuXZOOj99/TzJfd36uXPJkoaHArVuyjcGECUCdOrJk5dIlqXjWpAmQPbskMtOmySaVZPO0WqBzZwXnzkltGK1WityVKAGMGQM8fap2hGQLfvlFNgwFZHuK+vXZe2dLzL5UesCAAfj5558xf/58REZGolevXnj8+DG6du0KAOjUqVOqCb19+/bFpk2bMGnSJJw5cwYjR47E4cOH0adPH3OHSm9g9GjpDPH0BFavtmCJd41GNsUZNEgqnT14IDs99uwpezA9fSpLsj/7THpkSpcGBg+WTXY4I8+m+fjIh86xY8A778i2E19/Lf/E69bJkABRWlatkj8RgFRr4MeL7TF78vLBBx9g4sSJGD58OCpUqICIiAhs2rQpeVLutWvXcPv27eTza9SogcWLF2POnDkoX748VqxYgTVr1qBMmTLmDpVe06ZNwDffyPU5c+TDQzVeXlLPe9Ys2fnvxAkphPfOO1Jv/vRp4PvvZaMSX1+gY0fZKTA6WsWg6U2UKyf7I/32m0zuvXQJePddGTU8d07t6MjabNsGtGsnixy7d5ftKMj2WGTCbp8+fdLtOdmxY8cLt7Vu3RqtW7c2c1SUEa5dk+K6iiIb63XooHZEz9BogDJl5Bg8WDYs2bwZ+OMPYONG6aVZtEgOFxeZH/Puu5L8BASoHT2ZQKORkcTmzWXo6IcfJKkuUwbo3x8YNkx2tiDHdviw/BdPSJD5ebNm2dTcfnoGd2yg1xYfD7RuLTlApUrA5MlqR/QKWbPKkpWFC6Xm/K5dwBdfSAlXnQ4IC5P+43z5pMjI6NHSc8PxB5vh5QWMGyeboTdqJP+sEyYAxYoB8+fLt21yTCdOyHsiNla2o1i8mJt/2jImL/TaBg0CDh6UnGD5ctkLxGY4OwNvvy1DSGfOAGfPyqdczZryVezoUWDECBmTKFpUkpw9e/jpZyOKFZMOtvXrgSJFgKgooEsX2ejxwAG1oyNL+/tv2Uv2/n35orV6tY39vaIXMHmh17JxI/DTT3J94ULZHdimFSsm2dju3fJJ9+uvQLNm8hfu4kVZh/vWW0CePDI+tnUrN5O0choN0LSp9MKMHy+9MgcPylZanToBN26oHSFZwtGjshDxn3+AypWlwgKHEG0fkxcy2d27stsvAPTrJyuS7UquXLIz4Lp18lVtxQqZzJMliyQ2s2YBISEy4bdLF2DDBhlDI6vk5iZTns6fl38uQBLuYsWAUaMAE4p6ko05dEiGiB48kKQ1LIy7RNsLJi9kEkUBunWTBKZsWSnyZNe8vIBWrWRS7927wJ9/Aj16ADlzygTg+fOlhyZXLlm5tHYtC41YKT8/YN48+UB76y1ZWj1ypEx5WrSII4L2Zt8+oF494OFDGQ3evFm+f5B9YPJCJpk9WzoaXF1laaq7u9oRWZCrK9CwoawHv30b2L5d6sfkzg3ExMgnYIsWksh8+CETGStVqZLM1V62DMifX4aPOnaUIYU0Fj+SDVq3TnpcYmKkSsKmTUAG7xZDKmPyQkY7exYwbCM1bpz0vDgsJydZWv3jj8D16zJXpl8/IG9e4NEjyewMiUzHjpLxJXCzN2uh0chKuTNnpPcwc2aZG1G7tiy3joxUO0J6XbNmAS1bSs9aw4YyP8/LS+2oKKMxeSGjJCTItI8nT6Qrtm9ftSOyIlqt9EtPniyF8fbuTZ3ILFokQ0u+vjKXZvNmVve1Eu7uUmH14kWgd2/JSdevl8S8Z0/ZfYJsg6JIuf9evWQIsFs36YHJlEntyMgcmLyQUb77DjhyRMr+z58vn9eUBq1W1uMaEpndu2UDHn9/GXyfN0++Dvr7y6fl7t2cbGEFcuaU7a9OnZKel6QkGR0sUkQ+EB8+VDtCepn4eFlBZpiDN2oU8PPPUnuS7BM/guiVTpwAvv1Wrs+YIVM8yAiGHpmpU2Voaft24JNPgBw5ZBXTjBnA22/DuWhRlAoNBSIiWBBPZcWLy1Slv/4CatSQnsaxY4HChYGJE+Vnsi7Xr8u8lkWLpHzTvHnA8OGsnGvvmLzQSyUmykhHYqJM4WjTRu2IbJRhjszMmTIW8eefQOfOgLc3NNevo+iaNXCpUkXq2X/7rWzQQ6p56y3pFFuzBihVSpbaDhokScz06VwZby22bZNi2IZimRs3piyHJ/vG5IVeavJk2Q/Ex0c6CvhtJgO4uMjQUWgocOcOEpcuxc0aNaC4ucnGkcOGyadkjRrS6Pfvqx2xQ9JoZB+c48eBuXNlZdLt27KDRLFiUseQdQrVoShSHDskBLh3DwgMlGHtkBC1IyNLYfJC6Tp3TrpfAdnozt9f3Xjskrs7lJYtcXjwYCTeuCF93iEhMuS0b5/Mi/H3l4kYy5Zx3EIFTk5SlPHcuZRh02vXZEfiYsVkbgUXklnO/fuyqeLgwTJdrEsX2bmjYEG1IyNLYvJCaTLM1n/6FKhfn12xFpElizT0li1SfGTyZOkTT0yUJTAffCCV1rp3l0IlnOhrUa6uspLlwgVJ5nPlAq5cAT7+WCb2zpjBsj7m9scfMrK6Zo10YM6cKb1iHh5qR0aWxuSF0jRzpoz5Z8okhek4XGRh/v6y3PrwYRlK+vJLGbeIiZHxilq1gEKFgK+/lrr3ZDEeHkD//sDly5Jf+vvLpNHeveWfZMIEIDpa7SjtS2ysJIlNm8qG8KVKyQabn3zCv02OiskLveDWLWDoULk+bpwdbLpo60qWTJnEu2OHdIl5e8tS7DFjZOyiRg3JMrmm12I8PSW/vHRJllnnzStzYv73PyBfPqkfc/u22lHavq1bgQoVZHhOo5FCmUeOyDwXclxMXugFAwdKbbVq1YBPP1U7Gkqm1UqPyy+/yAaRS5YAjRqlzI/55BMZVmrbVuqhJyWpHbFDcHeXXpeLF2XKUsmS0kE2frwk/l27AseOqR2l7blxQ0ZKQ0KkbfPlk9VFkyY52LYklCYmL5RKeLh8Jmq1MobPYnRWysND/rJv3Ch/5SdOlLKw8fHA0qWS1Bi+/p85o3a0DsHVVaYsnTwptWJq1pSJvKGhQMWKUotkxQoWV36VhAQZeitRQuaoa7VS5/H4cak2QAQweaFnJCTIMlBAelzYLWsj/P2lu+zvv6U//fPPgezZZfxv/HjpCqhRQ/rdY2LUjtbuabWyOGz3bukQa9dOiqf99Zfsp1SwoFSAvX5d7Uiti14P/P67TMj93/+Ax48lATx6VOo8ckdoehaTF0r2ww/yJd3XF/jmG7WjIZNpNPIVf+pU4OZNYOVKmeHo5CSfoh9/LMNKnToBO3eymq8FVKsGLF4sq5KGDZPiyjduACNHypBSs2aykMyRe2MUBVi1CihXDmjfXuaf58ol25D89RdQvrzaEZI1YvJCAKRuhSFh+f57KUpHNszNTYphrF8vn5aGfvgnT4CFC6X/vVgxqX3P3QfNLk8e+f91/bpsOB4cLD0NGzZIL03evLKC6cgRx8kpdToZFqpUCWjVSvaV8vGROegXLkiOzZVElB4mLwRAVk3Excm4/Icfqh0NZSg/P6ltf/q07HjdvTvg5SWfEF9+CQQESBfA2rUsGWtm7u7Su7B9u/RyfvGFbAp55w4wZYp8kJcqJR/g9jpV6d492ei1YEGZtnX0qLwdv/5alp9/9RWQObPaUZK1Y/JC2LQJWL1aRhemT+e3Hbul0ciO1z//LGt4586VSQWGLoAWLWSS75dfSmJDZlW8uPRy3rwpzd+2rSQ3Z87IB3nJknJ89ZWU+7HlHpnERKm92Lmz5MpffSWvO1cuqeJ9+TIwejR7fMl4TF4cnE4n3dUA0LevTJYjB+DlJWt4d+8GIiOlZyZnTlmCPXYsULQoULeuLD3jLoRm5eICNGkik1Xv3JHl1o0aye1nzkgvReXKMvTUpYvMobl7V+2oX02vl6lWn30msTdoACxYIG+noCC5fu2aTF7OkUPtaMnWMHlxcHPmyB/IHDnk2x45oBIlZE7MjRuylrdhQ+ml2bZNlsrkySOrmex1HMOKeHtLgrJxowyvLF4sK5QyZZLOsvnzgQ4dZFJ9YKAkBkuWSBJgDT0zt26lxOjnJ4vcpk2TZCt7dtleYe9e4NAhoGNHmZpF9Dqc1Q6A1PPwITBihFwfNYpdtg7P1VVmTrZqJdV7586VrQhu3pSlaD/8IJOievaUc/jJY1ZZskju2K6d9Fbs2QNs3izDLxERKce0aXJ+njzSQ1O2rBzFiwNJSeYbA46Nlec/ckSOw4elE+9ZXl4yGtmunRSbc3ExWzjkYJi8OLBvvwX++UfG1T/+WO1oyKrkzy8Z7ddfy6SoOXNkV7xdu+T4/HOZwNCzp6xaIrNycwPq1JFj/HgZXtqxQ3ox9u6VCr43b8qxZo3hXi5wdm6CAgW0KFBA/knz55ddsX18gKxZ5TJLFqlDo9GkzHfT6WR/pocP5fLff6V358oVmZ9y+bKsnHq+t0ejkUnH9etLslK9uuTERBmNyYuDungR+PFHuT5pkvzxInqBs7PUimnaVIaVfv1Vtie4cSOlN6ZOHdma4N13+UllIb6+slLngw/k58ePpecjIgI4cUKOkycVxMU54cIF882/zpNH5q8EBUmJoWrVOH+FLIMfWQ7qf/+Tirr168sUB6JXyptXxhm/+kp6Y2bNkskZ27bJ4esrm0b26MHdPC0sUybZ9qpWrZTb4uMTMX/+dhQqVAc3bzrj6lUZDbxzR3pU/v1XLh8+lMm1ipLSk+LsnNIrY7jMm1f+WQsWlKNwYVktRKQGJi8O6K+/pPiqVitb4nBpNJnk2d6Yq1elJ8awWeR338lqpcaNZXZmw4ayBp8sTqsFfH2foFYthXNNyO5wtZGD0etlS3lAapWVLatuPGTj8ueX0rHXrgHLl8vyakWR+TFNmwJFigDjxsnSGSKiDMLkxcGsXClj415eUhSKKEO4uADvvw9s3QqcPSvFg7JmlRmeQ4fKmMOHH0rhD2tY00tENo3JiwNJTEyp5TJwoExRIMpwxYrJRN6bN6XiWuXKMsHqt9+k8EfFijLMFBendqREZKOYvDiQBQvkS3H27ClDR0Rm4+EhFdcOHpSja1epfx8RIZN68+SRNyK3IiAiE5k1eXnw4AE6dOgAb29v+Pj4oFu3boiNjX3pfYKDg6HRaFIdn3zyiTnDdAhPnwIjR8r1oUOlkieRxVSuLEXvbt6UDX0KFZJlLpMny1YEjRrJyiW9Xu1IicgGmDV56dChA06dOoWwsDBs2LABu3btwsdGVEPr0aMHbt++nXxMmDDBnGE6hNmzpahUnjzAp5+qHQ05rGzZZCvl8+dlUm+jRrLcbdMm2eDHMOT0779qR0pEVsxsyUtkZCQ2bdqEX375BVWrVsVbb72Fn376CUuWLMGtW7deel9PT0/4+fklH97sJngjjx5JNV1AdnD18FA3HiJotbKceuNG4Nw5GT7y8ZHqiQMHygTfTz4BTp1SO1IiskJmq/Oyb98++Pj4oFKlSsm31atXD1qtFgcOHEDLli3Tve9vv/2GRYsWwc/PD82aNcPXX38NT0/PNM+Nj49H/DO73sbExAAAdDoddDpdBr0aJD/ms5e24ocftLh3zwlFiij48MNEWCJ8W20rNTh8W+XPL8upv/4amt9/h9OMGdCcPCndhbNnQ1+7NvSffgqlaVPo/htWcti2MoHDv69MxPYynrnaypTH0yiKedYtfvfdd5g/fz7Onj2b6vZcuXJh1KhR6NWrV5r3mzNnDvLnz4/cuXPj+PHj+N///ocqVapg1apVaZ4/cuRIjBo16oXbFy9enG7C40hiYlzwySchiItzwcCBh/H22zfVDono5RQF2U+dQqE//oD/gQPQ/JewxOXMiUtNmuBavXrQeXmpHCQRZbS4uDi0b98e0dHRrxxxMTl5GTJkCMaPH//ScyIjI7Fq1arXSl6et23bNtStWxcXLlxA4cKFX/h9Wj0vAQEBuH//foYPN+l0OoSFhSEkJAQuNlKy8ssvtZg40Qnlyik4eDARWgutL7PFtlIL2+olrl2DdvZsaH/9FZoHDwAAiW5uUDp2BPr0AUqVUjlA68X3lWnYXsYzV1vFxMQgR44cRiUvJg8bDRw4EF26dHnpOYUKFYKfnx/u3r2b6vbExEQ8ePAAfn5+Rj9f1apVASDd5MXNzQ1ubm4v3O7i4mK2N6A5Hzsj3b8PzJwp18eM0cDNzfIx20pbWQO2VRoKFwYmTJAdrn//HcqUKXA+cSJlS4J69YB+/WTir6UycxvD95Vp2F7Gy+i2MuWxTE5ecubMiZw5c77yvOrVq+Phw4c4cuQIgoKCAEgvil6vT05IjBEREQEA8Pf3NzVUhzdliuw2GxgoldqJbJaHB/DRR0j88EMc+P571Dh8GNp166Si79atstz6s8+krkzmzGpHS0RmZravKiVLlkTDhg3Ro0cPHDx4EHv27EGfPn3Qtm1b5M6dGwBw8+ZNlChRAgcPHgQAXLx4Ed988w2OHDmCK1euYN26dejUqRPeeecdlCtXzlyh2qV//wV+/FGuDx/OzRfJTmg0+KdMGSQtW5ayMilLFll6/fnnskpp4EDZloCI7JZZ+1l/++03lChRAnXr1kXjxo3x1ltvYc6cOcm/1+l0OHv2LOL+KxPu6uqKrVu3on79+ihRogQGDhyIVq1aYf369eYM0y5NnSpLpMuVA5o3VzsaIjMoUEC2Rb9xA5g+XWrExMRInZjChWWvpd27uZcSkR0y21JpAMiWLRsWL16c7u8LFCiAZ+cLBwQEYOfOneYMySFER8uQESB7GXEqANk1Ly+pvPjJJ1LsbsoUICxMdiFduRKoVEk2imzdWjaQJCKbx481O/TTT5LAlCoFvPee2tEQWYih8N2WLcCJE7J/kru7bKPeoQNQsKDUk/lv1RIR2S4mL3bm0SPpNQfY60IOrEwZYM4c4No14JtvAD8/2Vdp6FAgIADo3VvmyRCRTeJHm52ZPl0m6xYvLr3kRA4tZ05g2DCZwDt/PlChAhAXB8yYIf9JWrQAdu3ivBgiG8PkxY48fgxMmiTXhw0DnJzUjYfIari5AZ06AUePAtu2Se0ARQHWrgVq1ZJdr3//HRbZO4OI3hiTFzvy669SmK5wYaBtW7WjIbJCGg1Quzawfj0QGQn07CnzYo4cAdq3l/88EyfKpDEislpMXuyETpfS6zJoEOBs1nVkRHagRAlg1izg+nVg9GggVy65PmiQzIsZOFDmzBCR1WHyYieWLZO/s7lySe84ERkpRw6Z3X71qmw5UKpUysz3QoWkR+bIEbWjJKJnMHmxA4oi278AUmTUw0PdeIhskrs70K0bcPIk8OefQN26QFKSzIWpVEmGmzZuBP7b5ZqI1MPkxQ5s2QIcPw5kyiS1uojoDWg0QMOGsmfSsWPAhx/KOOyOHUCTJkDZssC8ecAzu9kTkWUxebED48fL5ccfA1mzqhsLkV2pUAFYuBC4dEnmwGTODJw+DXz0UUrRu4cP1Y6SyOEwebFxhw4B27fLF8N+/dSOhshOBQTIKqTr12WMNk8e4PbtlKJ3AwfK74jIIpi82Ljvv5fLdu2AfPnUjYXI7mXJIquRLl2SondlygCxsSmTezt2lDFcIjIrJi827MIF2XcOkL+nRGQhrq6yrO/4cZncW6cOkJgILFoElC8vc2a2bWPlXiIzYfJiw374QRY+NG4scwiJyMIMk3vDw2UDyLZtZUOxzZtltVKlSsDSpZLYEFGGYfJiox48AEJD5foXX6gaChEBQFCQLKs+f142fvTwkO0I2raVfZRmzACePFE7SiK7wOTFRv3yi/wdLF8eCA5WOxoiSlaoEDBtmlSNHDECyJZN5sj07g3kzy+7XD94oHaURDaNyYsNSkyUv40A0Lev9FwTkZXJkQMYOVKSmB9/lMTl3j1g+HCZXT9gAFcoEb0mJi82aPVq+ZuXM6esMiIiK5YpE/DZZzLD/rffpLv08WNg8mTppenSRWrHEJHRmLzYoKlT5dKwIS4R2QBnZ9kn6dgxWaEUHCzdqPPnA6VLAy1aAPv2qR0lkU1g8mJjjhwB9uwBXFyAXr3UjoaITGZYobR9O3DgAPDee3Lb2rVAjRpArVqS3HCZNVG6mLzYGEOvS5s2QO7c6sZCRG+oShUp1hQZKZtCurgAu3ZJ/YPAQGDJEi6zJkoDkxcbcvu2/C0DZKIuEdmJ4sVlCeHlyzKRN1Mm4O+/ZVJb8eLArFnA06dqR0lkNZi82JBZswCdTnqWK1dWOxoiynB58gCTJskKpdGjgezZZZl1r15AgQKyC2tMjNpREqmOyYuNiI+X5AVgrwuR3cuWDfj6a+DqVVlmnS8fcOcOMGSIXP/yS+DuXbWjJFINkxcbsWyZ/K3Kmxdo2VLtaIjIIp5dZj1/PlCyJBAdDYwdK3Vj+vQBrlxRO0oii2PyYiMMvS49e8qcPiJyIC4ushHkyZPAmjVA1aoyB2b6dKBIEfkda8WQA2HyYgOOHwf27pUyEd27qx0NEalGqwXefVfqwWzbBtSrByQlAQsXSq2Yli2BQ4fUjpLI7Ji82ICZM+WyZUvAz0/dWIjICmg0QO3aQFgYcPCg1IoBpFemShUgJASaHTtYK4bsFpMXK/foEbBokVxnUToiekHlylIr5vRpoHNnwMkJ2LoVzvXr4+3//Q+a9esBvV7tKIkyFJMXK7doERAbC5Qowd2jieglSpYEQkOBixeBPn2guLsj27lzcG7VSvZTWryYBe/IbjB5sWKKkjJk9Mkn3D2aiIyQPz/w009IPH8e51q1gpI5s0z07dBBCt7NmSO1F4hsGJMXK7Z3L3DiBODhIb3BRERG8/VFZMeOSLx4ERgzJqXgXc+espv15MmyuzWRDWLyYsUMvS7t2gE+PqqGQkS2yscH+OorKXj3ww+yKdqtW7INQYECwLffAg8fqhwkkWmYvFip+/eB5cvlOifqEtEby5QJ6N9fel/mzJHel/v3gWHDZKjpyy+Be/fUjpLIKGZLXr799lvUqFEDnp6e8DGy20BRFAwfPhz+/v7w8PBAvXr1cP78eXOFaNXmzQMSEoBKleQgIsoQbm5Ajx7A2bPAb79JfZiYmJSqvf36ATduqB0l0UuZLXlJSEhA69at0cuEboMJEybgxx9/xKxZs3DgwAFkypQJDRo0wFMH201VUeSLEcBeFyIyE2dnoH17qYK5erV8S3ryBJg6VXplPv5YVi4RWSGzJS+jRo1C//79UbZsWaPOVxQFU6ZMwbBhw/Duu++iXLlyWLBgAW7duoU1a9aYK0yrtHOnbGWSOTPwwQdqR0NEdk2rBVq0kGJ3W7YAtWrJ9vU//wwUKwZ07MitB8jqOKsdgMHly5cRFRWFevXqJd+WJUsWVK1aFfv27UPbtm3TvF98fDzin1n2F/PfdvE6nQ46nS5DYzQ8XkY/7vN+/tkJgBYffJAEV1c9zPx0ZmGptrIHbCvjsa2M91ptFRwMBAdDs2cPtOPHQ7tpE7BoEZTffoPy7rtIGjoUCAw0T8Aq43vLeOZqK1MeT6Mo5q0fHRoain79+uHhK2az7927FzVr1sStW7fg7++ffHubNm2g0WiwdOnSNO83cuRIjBo16oXbFy9eDE9PzzeKXQ2xsc746KOGSEhwwoQJO1Gs2EO1QyIiB5XlwgUUW7ECuffvT77tTsWKONe6NR6ULKliZGSP4uLi0L59e0RHR8Pb2/ul55rU8zJkyBCMHz/+pedERkaiRIkSpjzsGxk6dCgGDBiQ/HNMTAwCAgJQv379V754U+l0OoSFhSEkJAQuZtraefZsLRISnFC6tIK+fWvYbGE6S7SVvWBbGY9tZbwMa6vPP4fu9Gk4TZgAzZIl8D16FL5Hj0L/zjvQDx0KpU4du6igyfeW8czVVoaRE2OYlLwMHDgQXbp0eek5hQoVMuUhk/n9t+PgnTt3UvW83LlzBxUqVEj3fm5ubnBzc3vhdhcXF7O9Ac352KGhctm9uwaurrb/H8icbWVv2FbGY1sZL0Paqnx5WZk0ejQwfjwQGgrtrl3Q7toFVK0qy62bNLGLJIbvLeNldFuZ8lgmJS85c+ZEzpw5TQ7IGAULFoSfnx/Cw8OTk5WYmBgcOHDApBVLtuzvv4EjRwAXF+DDD9WOhojoOYULy1LIr78GJk6U6wcOAM2aSYIzbJjscK1lCTEyL7O9w65du4aIiAhcu3YNSUlJiIiIQEREBGJjY5PPKVGiBFavXg0A0Gg06NevH8aMGYN169bhxIkT6NSpE3Lnzo0WLVqYK0yr8uuvctmiBZAjh6qhEBGlLyBAllRfuQIMHgx4ecm3r9atgTJlgIULuQkkmZXZkpfhw4cjMDAQI0aMQGxsLAIDAxEYGIjDhw8nn3P27FlER0cn/zx48GB89tln+Pjjj1G5cmXExsZi06ZNcHd3N1eYVuPpU9lBGgC6dVM3FiIio/j6yjDSlSvA8OGyFUFkJNCpk2wC+fPP3ASSzMJsyUtoaCgURXnhCA4OTj5HUZRUc2g0Gg1Gjx6NqKgoPH36FFu3bkWxYsXMFaJVWb0a+Pdf+ULzzGpxIiLrlz07MGqUJDHffSddx5cuSaG7IkWAn36SAnhEGYQDk1bCMGTUtSvg5KRuLEREryVLFmDoUElifvgB8PeXrQY+/xwoWFDmyTwzdYDodTF5sQKXLwPh4TJRv2tXtaMhInpDz24COWMGkC8fcOcOMGiQ7J80ZgzwzJQBIlMxebECCxbIZd26skM9EZFdcHeXDdouXADmzpUhpAcPZLVS/vxyef++2lGSDWLyojJFSUleXlFCh4jINrm4SLdyZKTUiylVSnpexoyRb2yDBgFRUWpHSTaEyYvK9u6VntVMmWSJNBGR3TLsZH3iBLBypeyT9PixzIUpWFDmxly/rnaUZAOYvKhs4UK5fP99SWCIiOyeVivF7I4cATZsAKpVk3oRP/0khfB69pRvdUTpYPKioqdPAcN+k506qRsLEZHFaTSyrcDevcDWrUCtWoBOJ5V7ixWTsfSzZ9WOkqwQkxcVbdgAPHwotV2eKX9DRORYNBpZsbBjB/DXX0CDBkBSEjB/PlCyJNC2rQw1Ef2HyYuKDBN1O3TgViBERACAt94CNm2SPZOaN5dVDUuXAuXKAS1bAkePqh0hWQF+ZKrk3j3gzz/leseO6sZCRGR1qlQB1q4Fjh2TSYEaDbBmDRAUJENN+/erHSGpiMmLSpYskX3LKlWSVYNERJSGChWA5cuBkyeBDz+UbuqNG4Hq1WUvlZ071Y6QVMDkRSWGISNO1CUiMkKpUrI88+xZ4KOPZNl1eLhMGHznHWDLFhliIofA5EUFp08Dhw/L/722bdWOhojIhhQpIpvBXbgAfPop4OqaMsm3WjVg/XomMQ6AyYsKDLVdGjUCcuZUNxYiIpuUPz8wfbpsDte/P+DhARw8KJN8AwOBFSsAvV7tKMlMmLxYmF4PLFok1zlkRET0hnLnlh2sr1wBhgwBvLyAv/8GWrcGypSR7QgSE9WOkjIYkxcL271bdoj39gaaNlU7GiIiO5ErFzB2LHD1KjBiBODjI3spffih1IqZOxdISFA7SsogTF4s7Pff5fK992TDVSIiykDZsgEjR0oS8913QI4cMj+mWzegaFFgxgwpb042jcmLBel0suIPANq1UzcWIiK75u0NDB0qw0mTJgF+fsC1a0Dv3kChQsDkybIpJNkkJi8WFB4O/POPTNKtU0ftaIiIHECmTMCAAbLR47Rpsh/L7dtyW8GCwLhxQEyM2lGSiZi8WJBhyKh1a1kmTUREFuLhIb0uFy4AP/8svS/37knvTP780I4eDZdHj9SOkozE5MVCnjwBVq+W6xwyIiJSiasr0L27FLubPx8oXhx4+BBOY8Yg5OOPof3qK+DuXbWjpFdg8mIhGzcCjx5Jj2WNGmpHQ0Tk4JydpV7FqVPAsmVQypaFy5MncPr+e6BAAakdc+uW2lFSOpi8WIhhyKhtW+4gTURkNZycgNatkXjoEA58+SX0QUHSVT5lisyJ6dVLJv2SVeHHqAXExAAbNsh1DhkREVkhrRZRVaogae9eYPNm4K23pC7MrFmyxLprV+DcObWjpP8webGANWuA+HgZWq1QQe1oiIgoXRoNUL++7Je0cycQEiIVekNDpdhdu3bAiRNqR+nwmLxYgGHIqF07+X9BREQ2wLBb9f79QLNmsr/LkiVAuXJAixbAoUNqR+iwmLyY2b17QFiYXOeQERGRDapaFVi3Djh2TGpdaDTA2rVAlSpAw4ay7wtZFJMXM1u5EkhKAipWBIoVUzsaIiJ6bRUqAMuWyQqlTp1ksu/mzcDbbwO1ask3VUVRO0qHwOTFzAzbAbRtq24cRESUQUqWlBox584BH38MuLgAu3bJXBlDL41er3aUdo3JixndvQvs2CHX339f1VCIiCijFSoEzJ4tWw98/rlU8T10CHj3XemlWbJEut4pwzF5MaM1ayT5DgqScgFERGSH8uYFpk6VejBDhgCZM8uKpHbtgFKlgHnzZGdeyjBMXsxoxQq5ZK8LEZEDyJULGDsWuHoVGDUKyJZNhpY++ggoUgSYPl0K4NEbY/JiJvfvA9u2yXUmL0REDiRrVmD4cOmJ+f57wNcXuHYN6NNHuuG//172i6HXxuTFTNaulaHOChUk4SYiIgeTOTPwxRfA5cvAtGlAvnzAnTvA4MFA/vzAyJHAgwdqR2mTzJa8fPvtt6hRowY8PT3h4+Nj1H26dOkCjUaT6mjYsKG5QjQrwyqj1q3VjYOIiFTm4QH07g2cPw/MnSt1M/79V4aW8ucHBg0CoqLUjtKmmC15SUhIQOvWrdGrVy+T7tewYUPcvn07+fjdUJ7Whjx4AISHy3UOGREREQDA1VX2SDp9Gli6FChfHoiNBSZOlJ2se/fmJpBGMlvyMmrUKPTv3x9ly5Y16X5ubm7w8/NLPrJmzWqmCM1n7VrZCqNcORamIyKi5zg5AW3aSMXeDRuA6tVlA7wZM2QTyC5dgMhItaO0as5qB/C8HTt2IFeuXMiaNSvq1KmDMWPGIHv27OmeHx8fj/j4+OSfY2JiAAA6nQ66DF6aZni8Vz3u8uVOALRo2TIJOp1jFioytq2IbWUKtpXx2FamUa296tcHQkKg2bUL2nHjoA0PB+bPh7JgAZQWLZD0v/9JiXYrYq62MuXxNIpi3lrGoaGh6NevHx4+fPjKc5csWQJPT08ULFgQFy9exJdffgkvLy/s27cPTk5Oad5n5MiRGDVq1Au3L168GJ6enm8avsliY53RpUsjJCZqMW1aOPLmjbV4DEREZJt8zp1DsZUr4X/gQPJtdytUwLn338c/pUvb9e6+cXFxaN++PaKjo+Ht7f3Sc01KXoYMGYLx48e/9JzIyEiUKFEi+WdTkpfnXbp0CYULF8bWrVtRt27dNM9Jq+clICAA9+/ff+WLN5VOp0NYWBhCQkLg4uKS5jkLF2rQrZszSpVSEBGRmKHPb0uMaSsSbCvjsa2Mx7YyjdW116lTcPr+e2iWLoXmvyq9+urVoR88GErjxqomMeZqq5iYGOTIkcOo5MWkYaOBAweiS5cuLz2nUKFCpjzkKx8rR44cuHDhQrrJi5ubG9zc3F643cXFxWxvwJc99po1ctmmjcY6/gOozJz/DvaGbWU8tpXx2FamsZr2qlAB+O034JtvZELv3LnQ7tsHbcuWMqFyyBBZzuqs3uyPjG4rUx7LpFedM2dO5MyZ0+SAXteNGzfwzz//wN/f32LP+SZiYmSDUYCrjIiIKAMUKiQTeb/+Gpg8GZg5Ezh+HGjfXm4bPBjo3BlI40u8PTPbaqNr164hIiIC165dQ1JSEiIiIhAREYHY2JQ5ICVKlMDq1asBALGxsRg0aBD279+PK1euIDw8HO+++y6KFCmCBg0amCvMDLVpE5CQICuMSpdWOxoiIrIb/v7AhAlSqXf0aCB7duDiRaBnT6naO3GiQ1XtNVvyMnz4cAQGBmLEiBGIjY1FYGAgAgMDcfjw4eRzzp49i+joaACAk5MTjh8/jubNm6NYsWLo1q0bgoKC8Ndff6U5LGSN/svD0LKlunEQEZGdyppVelyuXpWemDx5gNu3pdBd/vyyLcH9+2pHaXZmGywLDQ1FaGjoS895dq6wh4cHNhvGXGxQfDzwxx9yvUULVUMhIiJ7lykT0K8f8OmnwKJFwPjxsgmkYY5Mjx7AwIGyJYEd4t5GGWTHDumx8/cHqlRROxoiInIIrq6ya/Xp07IvTcWKsnP1jz8ChQtLwbvTp9WOMsMxeckghiGjd98FtGxVIiKyJCcnWSly+DCwZQtQu7aUep8/XyZhtmwJPFM7xtbxYzYD6PWyJQDAISMiIlKRRgOEhADbtkmy8t57ctuaNUC1akBwsKwuMW99WrNj8pIBDh6UDUG9vSXZJSIiUl2VKsDKlcCpU7IhpLMzsHMn0KgREBgI/P679M7YICYvGcBQmK5JExl+JCIisholSwJz5wKXLgH9+8tk37//lloxxYoB06cDcXFqR2kSJi9vSFFS5rtwyIiIiKxWQADwww9SK+abb4AcOYDLl4E+fWSZ9TffAA8eqB2lUZi8vKEzZ2R1mqur9MQRERFZtWzZgGHDpFbMtGlAgQJSG2b4cFla3b+/JDhWjMnLGzIMGdWrB2TOrGooRERExvP0BHr3Bs6fl32UypcHHj8GpkyRZdadOgEnTqgdZZqYvLwhDhkREZFNc3aW+S/HjgF//gnUqSMTeRculE0gmzSRYmZWtEKJycsbuHEDOHRIVqE1b652NERERG9AowEaNgTCw+XDrXVrKVy2caMspa1aFVixAkhKUjtSJi9vYt06uaxRA/D1VTcWIiKiDFOpErBsGXD2LNCrF+DunpzQOJcpgwJ//ik7EauEycsbMCQv776rbhxERERmUaQIMGOGTO4dPhzIlg2aixdRbMUKVcNi8vKaHj0Ctm+X6xwyIiIiu5YrFzBqFHDtGpKmTEFk+/aqFjZj8vKatm6VHrMiRaTGDxERkd3LlAn6Tz/F9bp1VQ2DyctrWr9eLps1kzlOREREZBlMXl6DXg/88Ydcb9pU3ViIiIgcDZOX13D4sAZ378pGjG+/rXY0REREjoXJy2v44w8ZJ2rYEHBxUTkYIiIiB8Pk5TX88Yc0G4eMiIiILI/Ji4nu3XPH8eMaaLXciJGIiEgNTF5MdPiwHwCgenXZTZyIiIgsi8mLiQ4fln0AmjVTORAiIiIHxeTFBI8fA8eP5wTA+S5ERERqYfJigvBwDXQ6JxQsqKBUKbWjISIickxMXkywcaM0V+PGelbVJSIiUgmTFyPp9cDGjZKxNG6sqBwNERGR42LyYqSjR4GoKA3c3RPxzjtMXoiIiNTirHYAtiIgAJgwIQlHj16Am1thtcMhIiJyWOx5MZKvL9Cvnx5t255VOxQiIiKHxuSFiIiIbAqTFyIiIrIpTF6IiIjIpjB5ISIiIpvC5IWIiIhsitmSlytXrqBbt24oWLAgPDw8ULhwYYwYMQIJCQkvvd/Tp0/Ru3dvZM+eHV5eXmjVqhXu3LljrjCJiIjIxpgteTlz5gz0ej1mz56NU6dOYfLkyZg1axa+/PLLl96vf//+WL9+PZYvX46dO3fi1q1beO+998wVJhEREdkYsxWpa9iwIRo2bJj8c6FChXD27FnMnDkTEydOTPM+0dHR+PXXX7F48WLUqVMHADBv3jyULFkS+/fvR7Vq1cwVLhEREdkIi1bYjY6ORrZs2dL9/ZEjR6DT6VCvXr3k20qUKIF8+fJh3759aSYv8fHxiI+PT/45JiYGAKDT6aDT6TIweiQ/XkY/rj1iWxmPbWU8tpXx2FamYXsZz1xtZcrjWSx5uXDhAn766ad0e10AICoqCq6urvDx8Ul1u6+vL6KiotK8z9ixYzFq1KgXbt+yZQs8PT3fKOb0hIWFmeVx7RHbynhsK+OxrYzHtjIN28t4Gd1WcXFxRp9rcvIyZMgQjB8//qXnREZGokSJEsk/37x5Ew0bNkTr1q3Ro0cPU5/ypYYOHYoBAwYk/xwTE4OAgADUr18f3t7eGfpcOp0OYWFhCAkJgYuLS4Y+tr1hWxmPbWU8tpXx2FamYXsZz1xtZRg5MYbJycvAgQPRpUuXl55TqFCh5Ou3bt1C7dq1UaNGDcyZM+el9/Pz80NCQgIePnyYqvflzp078PPzS/M+bm5ucHNze+F2FxcXs70BzfnY9oZtZTy2lfHYVsZjW5mG7WW8jG4rUx7L5OQlZ86cyJkzp1Hn3rx5E7Vr10ZQUBDmzZsHrfbli5uCgoLg4uKC8PBwtGrVCgBw9uxZXLt2DdWrVzc1VCIiIrJDZpvzcvPmTQQHByN//vyYOHEi7t27l/w7Qy/KzZs3UbduXSxYsABVqlRBlixZ0K1bNwwYMADZsmWDt7c3PvvsM1SvXt3olUaKogAwrfvJWDqdDnFxcYiJiWFm/gpsK+OxrYzHtjIe28o0bC/jmautDJ/bhs/xlzFb8hIWFoYLFy7gwoULyJs3b6rfGQLT6XQ4e/Zsqkk6kydPhlarRatWrRAfH48GDRpgxowZRj/vo0ePAAABAQEZ8CqIiIjIkh49eoQsWbK89ByNYkyKY0P0ej1u3bqFzJkzQ6PRZOhjGyYDX79+PcMnA9sbtpXx2FbGY1sZj21lGraX8czVVoqi4NGjR8idO/crp5lYtM6LJWi12hd6ejKat7c339xGYlsZj21lPLaV8dhWpmF7Gc8cbfWqHhcDbsxIRERENoXJCxEREdkUJi8mcHNzw4gRI9KsK0Opsa2Mx7YyHtvKeGwr07C9jGcNbWV3E3aJiIjIvrHnhYiIiGwKkxciIiKyKUxeiIiIyKYweSEiIiKbwuTlOdOnT0eBAgXg7u6OqlWr4uDBg+meGxoaCo1Gk+pwd3e3YLTq2bVrF5o1a4bcuXNDo9FgzZo1r7zPjh07ULFiRbi5uaFIkSIIDQ01e5zWwNS22rFjxwvvK41Gg6ioKMsErJKxY8eicuXKyJw5M3LlyoUWLVrg7Nmzr7zf8uXLUaJECbi7u6Ns2bLYuHGjBaJV3+u0l6P+zZo5cybKlSuXXFStevXq+PPPP196H0d9X5naVmq9p5i8PGPp0qUYMGAARowYgaNHj6J8+fJo0KAB7t69m+59vL29cfv27eTj6tWrFoxYPY8fP0b58uUxffp0o86/fPkymjRpgtq1ayMiIgL9+vVD9+7dsXnzZjNHqj5T28rg7Nmzqd5buXLlMlOE1mHnzp3o3bs39u/fj7CwMOh0OtSvXx+PHz9O9z579+5Fu3bt0K1bNxw7dgwtWrRAixYtcPLkSQtGro7XaS/AMf9m5c2bF+PGjcORI0dw+PBh1KlTB++++y5OnTqV5vmO/L4yta0Ald5TCiWrUqWK0rt37+Sfk5KSlNy5cytjx45N8/x58+YpWbJksVB01guAsnr16peeM3jwYKV06dKpbvvggw+UBg0amDEy62NMW23fvl0BoPz7778Wicla3b17VwGg7Ny5M91z2rRpozRp0iTVbVWrVlV69uxp7vCsjjHtxb9ZKbJmzar88ssvaf6O76vUXtZWar2n2PPyn4SEBBw5cgT16tVLvk2r1aJevXrYt29fuveLjY1F/vz5ERAQ8Mrs1JHt27cvVdsCQIMGDV7ato6uQoUK8Pf3R0hICPbs2aN2OBYXHR0NAMiWLVu65/B9lcKY9gL4NyspKQlLlizB48ePUb169TTP4ftKGNNWgDrvKSYv/7l//z6SkpLg6+ub6nZfX9905xoUL14cc+fOxdq1a7Fo0SLo9XrUqFEDN27csETINiUqKirNto2JicGTJ09Uiso6+fv7Y9asWVi5ciVWrlyJgIAABAcH4+jRo2qHZjF6vR79+vVDzZo1UaZMmXTPS+99Ze/zg55nbHs58t+sEydOwMvLC25ubvjkk0+wevVqlCpVKs1zHf19ZUpbqfWesrtdpS2pevXqqbLRGjVqoGTJkpg9eza++eYbFSMjW1a8eHEUL148+ecaNWrg4sWLmDx5MhYuXKhiZJbTu3dvnDx5Ert371Y7FJtgbHs58t+s4sWLIyIiAtHR0VixYgU6d+6MnTt3pvuh7MhMaSu13lNMXv6TI0cOODk54c6dO6luv3PnDvz8/Ix6DBcXFwQGBuLChQvmCNGm+fn5pdm23t7e8PDwUCkq21GlShWH+SDv06cPNmzYgF27diFv3rwvPTe995Wx/2ftgSnt9TxH+pvl6uqKIkWKAACCgoJw6NAhTJ06FbNnz37hXEd/X5nSVs+z1HuKw0b/cXV1RVBQEMLDw5Nv0+v1CA8Pf+lY37OSkpJw4sQJ+Pv7mytMm1W9evVUbQsAYWFhRreto4uIiLD795WiKOjTpw9Wr16Nbdu2oWDBgq+8jyO/r16nvZ7nyH+z9Ho94uPj0/ydI7+v0vKytnqexd5TFp8ibMWWLFmiuLm5KaGhocrp06eVjz/+WPHx8VGioqIURVGUjh07KkOGDEk+f9SoUcrmzZuVixcvKkeOHFHatm2ruLu7K6dOnVLrJVjMo0ePlGPHjinHjh1TACg//PCDcuzYMeXq1auKoijKkCFDlI4dOyaff+nSJcXT01MZNGiQEhkZqUyfPl1xcnJSNm3apNZLsBhT22ry5MnKmjVrlPPnzysnTpxQ+vbtq2i1WmXr1q1qvQSL6NWrl5IlSxZlx44dyu3bt5OPuLi45HOe/z+4Z88exdnZWZk4caISGRmpjBgxQnFxcVFOnDihxkuwqNdpL0f9mzVkyBBl586dyuXLl5Xjx48rQ4YMUTQajbJlyxZFUfi+epapbaXWe4rJy3N++uknJV++fIqrq6tSpUoVZf/+/cm/q1WrltK5c+fkn/v165d8rq+vr9K4cWPl6NGjKkRteYblvM8fhvbp3LmzUqtWrRfuU6FCBcXV1VUpVKiQMm/ePIvHrQZT22r8+PFK4cKFFXd3dyVbtmxKcHCwsm3bNnWCt6C02ghAqvfJ8/8HFUVRli1bphQrVkxxdXVVSpcurfzxxx+WDVwlr9Nejvo366OPPlLy58+vuLq6Kjlz5lTq1q2b/GGsKHxfPcvUtlLrPaVRFEUxb98OERERUcbhnBciIiKyKUxeiIiIyKYweSEiIiKbwuSFiIiIbAqTFyIiIrIpTF6IiIjIpjB5ISIiIpvC5IWIiIhsCpMXIiIisilMXoiIiMimMHkhIiIim8LkhYiIiGzK/wHIROmj8B5DIwAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Define Loss and optimizer**\n","\n","We set mean square error loss as the loss function\\\n","and use Adam Optimization as the optimizer for the model.\n","\n","In simple term, Adam Optimization is a variant of SGD (sotchastic gradient descent). We won't handle the details for the optimizer in this class.\\\n","Those who are curious about this can refer to [here](https://medium.com/mlearning-ai/optimizers-in-deep-learning-7bf81fed78a0).\n","\n","![picture](https://miro.medium.com/v2/resize:fit:640/1*XVFmo9NxLnwDr3SxzKy-rA.gif)\n"],"metadata":{"id":"_EZXUZiYyZ9o"}},{"cell_type":"code","source":["loss_function = nn.MSELoss()\n","\n","optimizer = optim.Adam(params=model.parameters(), lr=0.01)"],"metadata":{"id":"Y3rbwlVBr_6G","executionInfo":{"status":"ok","timestamp":1694493446019,"user_tz":-540,"elapsed":510,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":53,"outputs":[]},{"cell_type":"markdown","source":["**Train your model**"],"metadata":{"id":"xNZZAmVm0zm7"}},{"cell_type":"code","source":["train_epochs = 25000\n","loss_list = []\n","epoch_list = []\n","\n","for epoch in range(train_epochs):\n","    average_loss = []\n","    steps = 0\n","\n","    for i, (x_train, y_train) in enumerate(train_loader):\n","        pred = model(x_train)\n","        loss = loss_function(pred, y_train)\n","        average_loss.append(loss.detach().numpy())\n","\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","    if (epoch+1) % 500 == 0:\n","        print('Epoch: ',  epoch+1, ' / Loss: ', np.mean(average_loss), ' /model parameter: ', model.state_dict())\n","        loss_list.append(np.mean(average_loss))\n","        epoch_list.append(epoch+1)\n","\n","plt.plot(epoch_list, loss_list, label='train_loss')\n","plt.xlabel(\"Epoch\")\n","plt.ylabel(\"Loss\")\n","plt.show()"],"metadata":{"id":"u_pbm5m3VNxX","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"b4fd1fab-fdad-4625-c53d-4e83aa89746e","executionInfo":{"status":"ok","timestamp":1694493600156,"user_tz":-540,"elapsed":152105,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch:  500  / Loss:  0.20356789  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.1807, -0.9425,  1.7169]])), ('linear.bias', tensor([-1.1889]))])\n","Epoch:  1000  / Loss:  0.15332231  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.3037, -1.6808,  3.0721]])), ('linear.bias', tensor([-1.9006]))])\n","Epoch:  1500  / Loss:  0.1031328  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.4138, -2.3837,  4.3526]])), ('linear.bias', tensor([-2.5659]))])\n","Epoch:  2000  / Loss:  0.0854823  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.5214, -3.0315,  5.5435]])), ('linear.bias', tensor([-3.1788]))])\n","Epoch:  2500  / Loss:  0.04454031  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.6175, -3.6446,  6.6694]])), ('linear.bias', tensor([-3.7568]))])\n","Epoch:  3000  / Loss:  0.030906225  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.7126, -4.2053,  7.7028]])), ('linear.bias', tensor([-4.2967]))])\n","Epoch:  3500  / Loss:  0.017176755  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.7894, -4.6873,  8.5932]])), ('linear.bias', tensor([-4.7549]))])\n","Epoch:  4000  / Loss:  0.00793741  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.8555, -5.1270,  9.3933]])), ('linear.bias', tensor([-5.1806]))])\n","Epoch:  4500  / Loss:  0.006674136  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9210, -5.4847, 10.0757]])), ('linear.bias', tensor([-5.5172]))])\n","Epoch:  5000  / Loss:  0.0006103631  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9577, -5.7358, 10.5149]])), ('linear.bias', tensor([-5.7503]))])\n","Epoch:  5500  / Loss:  0.00017984187  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9816, -5.8811, 10.7796]])), ('linear.bias', tensor([-5.8831]))])\n","Epoch:  6000  / Loss:  3.819434e-05  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9920, -5.9522, 10.9115]])), ('linear.bias', tensor([-5.9544]))])\n","Epoch:  6500  / Loss:  9.233312e-06  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9967, -5.9800, 10.9634]])), ('linear.bias', tensor([-5.9806]))])\n","Epoch:  7000  / Loss:  1.3792558e-06  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9990, -5.9937, 10.9888]])), ('linear.bias', tensor([-5.9941]))])\n","Epoch:  7500  / Loss:  1.8645012e-07  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9996, -5.9974, 10.9954]])), ('linear.bias', tensor([-5.9976]))])\n","Epoch:  8000  / Loss:  1.5335341e-06  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0001, -6.0004, 11.0008]])), ('linear.bias', tensor([-6.0006]))])\n","Epoch:  8500  / Loss:  1.774492e-07  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9999, -5.9994, 10.9995]])), ('linear.bias', tensor([-6.0001]))])\n","Epoch:  9000  / Loss:  1.3853182e-08  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9999, -5.9995, 10.9991]])), ('linear.bias', tensor([-5.9995]))])\n","Epoch:  9500  / Loss:  5.2279287e-05  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0006, -5.9990, 10.9998]])), ('linear.bias', tensor([-6.0006]))])\n","Epoch:  10000  / Loss:  2.975741e-09  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0001, -6.0004, 11.0008]])), ('linear.bias', tensor([-6.0004]))])\n","Epoch:  10500  / Loss:  2.8213188e-08  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0002, -6.0014, 11.0025]])), ('linear.bias', tensor([-6.0013]))])\n","Epoch:  11000  / Loss:  1.3491074e-06  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9999, -5.9997, 10.9993]])), ('linear.bias', tensor([-6.0001]))])\n","Epoch:  11500  / Loss:  2.3969557e-08  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9999, -5.9992, 10.9984]])), ('linear.bias', tensor([-5.9992]))])\n","Epoch:  12000  / Loss:  4.2447606e-05  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0006, -5.9996, 10.9993]])), ('linear.bias', tensor([-5.9998]))])\n","Epoch:  12500  / Loss:  3.7702613e-08  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0000, -6.0003, 11.0005]])), ('linear.bias', tensor([-6.0003]))])\n","Epoch:  13000  / Loss:  6.4718604e-09  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0001, -6.0009, 11.0016]])), ('linear.bias', tensor([-6.0008]))])\n","Epoch:  13500  / Loss:  0.00013886529  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0001, -5.9983, 10.9994]])), ('linear.bias', tensor([-6.0017]))])\n","Epoch:  14000  / Loss:  6.886433e-09  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0001, -6.0007, 11.0014]])), ('linear.bias', tensor([-6.0007]))])\n","Epoch:  14500  / Loss:  4.082635e-06  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9998, -5.9992, 11.0005]])), ('linear.bias', tensor([-6.0016]))])\n","Epoch:  15000  / Loss:  0.00014885071  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0005, -6.0001, 10.9969]])), ('linear.bias', tensor([-5.9975]))])\n","Epoch:  15500  / Loss:  5.6566147e-08  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0001, -6.0006, 11.0012]])), ('linear.bias', tensor([-6.0008]))])\n","Epoch:  16000  / Loss:  0.0009377054  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0027, -6.0010, 11.0000]])), ('linear.bias', tensor([-5.9976]))])\n","Epoch:  16500  / Loss:  6.808893e-07  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0000, -6.0005, 11.0007]])), ('linear.bias', tensor([-6.0003]))])\n","Epoch:  17000  / Loss:  3.0876016e-08  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0001, -6.0004, 11.0008]])), ('linear.bias', tensor([-6.0004]))])\n","Epoch:  17500  / Loss:  1.3202127e-08  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0002, -6.0011, 11.0019]])), ('linear.bias', tensor([-6.0010]))])\n","Epoch:  18000  / Loss:  7.548825e-05  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0010, -5.9992, 11.0008]])), ('linear.bias', tensor([-5.9985]))])\n","Epoch:  18500  / Loss:  4.0280898e-10  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0000, -6.0002, 11.0003]])), ('linear.bias', tensor([-6.0002]))])\n","Epoch:  19000  / Loss:  0.0012716916  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0023, -6.0019, 10.9995]])), ('linear.bias', tensor([-5.9839]))])\n","Epoch:  19500  / Loss:  4.6520693e-10  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0000, -6.0002, 11.0004]])), ('linear.bias', tensor([-6.0002]))])\n","Epoch:  20000  / Loss:  1.1954948e-07  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0001, -6.0003, 11.0006]])), ('linear.bias', tensor([-6.0003]))])\n","Epoch:  20500  / Loss:  3.843648e-08  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9999, -5.9997, 10.9994]])), ('linear.bias', tensor([-5.9997]))])\n","Epoch:  21000  / Loss:  2.3313802e-08  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0002, -6.0013, 11.0023]])), ('linear.bias', tensor([-6.0012]))])\n","Epoch:  21500  / Loss:  1.2207725e-07  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0002, -6.0013, 11.0023]])), ('linear.bias', tensor([-6.0011]))])\n","Epoch:  22000  / Loss:  1.1310574e-09  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0000, -5.9999, 10.9998]])), ('linear.bias', tensor([-5.9999]))])\n","Epoch:  22500  / Loss:  3.7316294e-08  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9997, -5.9981, 10.9965]])), ('linear.bias', tensor([-5.9982]))])\n","Epoch:  23000  / Loss:  1.564028e-09  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0000, -6.0002, 11.0003]])), ('linear.bias', tensor([-6.0002]))])\n","Epoch:  23500  / Loss:  6.874946e-08  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0000, -6.0001, 11.0004]])), ('linear.bias', tensor([-6.0001]))])\n","Epoch:  24000  / Loss:  3.2730045e-09  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9999, -5.9995, 10.9992]])), ('linear.bias', tensor([-5.9997]))])\n","Epoch:  24500  / Loss:  1.9088486e-05  /model parameter:  OrderedDict([('linear.weight', tensor([[ 0.9998, -5.9993, 10.9983]])), ('linear.bias', tensor([-5.9989]))])\n","Epoch:  25000  / Loss:  1.5143413e-10  /model parameter:  OrderedDict([('linear.weight', tensor([[ 1.0000, -6.0000, 11.0000]])), ('linear.bias', tensor([-6.0000]))])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["print(\"Trained model: \", model.state_dict())\n","plot_model(model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"vy-X3h2afHDh","outputId":"1d8a59a9-3e1b-4898-9fbe-7ecf5587af44","executionInfo":{"status":"ok","timestamp":1694493646354,"user_tz":-540,"elapsed":613,"user":{"displayName":"박현영","userId":"06954657949543774416"}}},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["Trained model:  OrderedDict([('linear.weight', tensor([[ 1.0000, -6.0000, 11.0000]])), ('linear.bias', tensor([-6.0000]))])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## References\n","https://pytorch.org/docs/stable/index.html\n","\n","https://www.simplilearn.com/keras-vs-tensorflow-vs-pytorch-article\n","\n","https://www.assemblyai.com/blog/pytorch-vs-tensorflow-in-2023/\n","\n","https://github.com/wkentaro/pytorch-for-numpy-users\n","\n","https://www.baeldung.com/cs/convolutional-vs-regular-nn\n","\n","https://medium.com/mlearning-ai/optimizers-in-deep-learning-7bf81fed78a0"],"metadata":{"id":"ZSDn8-3yIiVS"}}]}